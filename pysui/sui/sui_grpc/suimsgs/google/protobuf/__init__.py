# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: google/protobuf/any.proto, google/protobuf/duration.proto, google/protobuf/empty.proto, google/protobuf/field_mask.proto, google/protobuf/struct.proto, google/protobuf/timestamp.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Any",
    "Duration",
    "Empty",
    "FieldMask",
    "ListValue",
    "NullValue",
    "Struct",
    "Timestamp",
    "Value",
)

import datetime
import re
import typing
from dataclasses import dataclass

import betterproto2
import dateutil.parser

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.7.1"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class NullValue(betterproto2.Enum):
    """
    `NullValue` is a singleton enumeration to represent the null value for the
    `Value` type union.

    The JSON representation for `NullValue` is JSON `null`.
    """

    NULL_VALUE = 0
    """
    Null value.
    """


@dataclass(eq=False, repr=False)
class Any(betterproto2.Message):
    """
    `Any` contains an arbitrary serialized protocol buffer message along with a
    URL that describes the type of the serialized message.

    Protobuf library provides support to pack/unpack Any values in the form
    of utility functions or additional generated methods of the Any type.

    Example 1: Pack and unpack a message in C++.

        Foo foo = ...;
        Any any;
        any.PackFrom(foo);
        ...
        if (any.UnpackTo(&foo)) {
          ...
        }

    Example 2: Pack and unpack a message in Java.

        Foo foo = ...;
        Any any = Any.pack(foo);
        ...
        if (any.is(Foo.class)) {
          foo = any.unpack(Foo.class);
        }
        // or ...
        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
          foo = any.unpack(Foo.getDefaultInstance());
        }

     Example 3: Pack and unpack a message in Python.

        foo = Foo(...)
        any = Any()
        any.Pack(foo)
        ...
        if any.Is(Foo.DESCRIPTOR):
          any.Unpack(foo)
          ...

     Example 4: Pack and unpack a message in Go

         foo := &pb.Foo{...}
         any, err := anypb.New(foo)
         if err != nil {
           ...
         }
         ...
         foo := &pb.Foo{}
         if err := any.UnmarshalTo(foo); err != nil {
           ...
         }

    The pack methods provided by protobuf library will by default use
    'type.googleapis.com/full.type.name' as the type URL and the unpack
    methods only use the fully qualified type name after the last '/'
    in the type URL, for example "foo.bar.com/x/y.z" will yield type
    name "y.z".

    JSON
    ====
    The JSON representation of an `Any` value uses the regular
    representation of the deserialized, embedded message, with an
    additional field `@type` which contains the type URL. Example:

        package google.profile;
        message Person {
          string first_name = 1;
          string last_name = 2;
        }

        {
          "@type": "type.googleapis.com/google.profile.Person",
          "firstName": <string>,
          "lastName": <string>
        }

    If the embedded message type is well-known and has a custom JSON
    representation, that representation will be embedded adding a field
    `value` which holds the custom JSON in addition to the `@type`
    field. Example (for message [google.protobuf.Duration][]):

        {
          "@type": "type.googleapis.com/google.protobuf.Duration",
          "value": "1.212s"
        }
    """

    type_url: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    A URL/resource name that uniquely identifies the type of the serialized
    protocol buffer message. This string must contain at least
    one "/" character. The last segment of the URL's path must represent
    the fully qualified name of the type (as in
    `path/google.protobuf.Duration`). The name should be in a canonical form
    (e.g., leading "." is not accepted).

    In practice, teams usually precompile into the binary all types that they
    expect it to use in the context of Any. However, for URLs which use the
    scheme `http`, `https`, or no scheme, one can optionally set up a type
    server that maps type URLs to message definitions as follows:

    * If no scheme is provided, `https` is assumed.
    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
      value in binary format, or produce an error.
    * Applications are allowed to cache lookup results based on the
      URL, or have them precompiled into a binary to avoid any
      lookup. Therefore, binary compatibility needs to be preserved
      on changes to types. (Use versioned type names to manage
      breaking changes.)

    Note: this functionality is not currently available in the official
    protobuf release, and it is not used for type URLs beginning with
    type.googleapis.com. As of May 2023, there are no widely used type server
    implementations and no plans to implement one.

    Schemes other than `http`, `https` (or the empty scheme) might be
    used with implementation specific semantics.
    """

    value: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    Must be a valid serialized protocol buffer of the above specified type.
    """

    def pack(
        self,
        message: betterproto2.Message,
        message_pool: "betterproto2.MessagePool | None" = None,
    ) -> None:
        """
        Pack the given message in the `Any` object.

        The message type must be registered in the message pool, which is done automatically when the module defining
        the message type is imported.
        """
        message_pool = message_pool or default_message_pool

        self.type_url = message_pool.type_to_url[type(message)]
        self.value = bytes(message)

    def unpack(
        self, message_pool: "betterproto2.MessagePool | None" = None
    ) -> betterproto2.Message | None:
        """
        Return the message packed inside the `Any` object.

        The target message type must be registered in the message pool, which is done automatically when the module
        defining the message type is imported.
        """
        if not self.type_url:
            return None

        message_pool = message_pool or default_message_pool

        try:
            message_type = message_pool.url_to_type[self.type_url]
        except KeyError:
            raise TypeError(f"Can't unpack unregistered type: {self.type_url}")

        return message_type.parse(self.value)

    def to_dict(self, **kwargs) -> dict[str, typing.Any]:
        # TODO allow passing a message pool to `to_dict`
        output: dict[str, typing.Any] = {"@type": self.type_url}

        value = self.unpack()

        if value is None:
            return output

        if type(value).to_dict == betterproto2.Message.to_dict:
            output.update(value.to_dict(**kwargs))
        else:
            output["value"] = value.to_dict(**kwargs)

        return output


default_message_pool.register_message("google.protobuf", "Any", Any)


@dataclass(eq=False, repr=False)
class Duration(betterproto2.Message):
    """
    A Duration represents a signed, fixed-length span of time represented
    as a count of seconds and fractions of seconds at nanosecond
    resolution. It is independent of any calendar and concepts like "day"
    or "month". It is related to Timestamp in that the difference between
    two Timestamp values is a Duration and it can be added or subtracted
    from a Timestamp. Range is approximately +-10,000 years.

    # Examples

    Example 1: Compute Duration from two Timestamps in pseudo code.

        Timestamp start = ...;
        Timestamp end = ...;
        Duration duration = ...;

        duration.seconds = end.seconds - start.seconds;
        duration.nanos = end.nanos - start.nanos;

        if (duration.seconds < 0 && duration.nanos > 0) {
          duration.seconds += 1;
          duration.nanos -= 1000000000;
        } else if (duration.seconds > 0 && duration.nanos < 0) {
          duration.seconds -= 1;
          duration.nanos += 1000000000;
        }

    Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.

        Timestamp start = ...;
        Duration duration = ...;
        Timestamp end = ...;

        end.seconds = start.seconds + duration.seconds;
        end.nanos = start.nanos + duration.nanos;

        if (end.nanos < 0) {
          end.seconds -= 1;
          end.nanos += 1000000000;
        } else if (end.nanos >= 1000000000) {
          end.seconds += 1;
          end.nanos -= 1000000000;
        }

    Example 3: Compute Duration from datetime.timedelta in Python.

        td = datetime.timedelta(days=3, minutes=10)
        duration = Duration()
        duration.FromTimedelta(td)

    # JSON Mapping

    In JSON format, the Duration type is encoded as a string rather than an
    object, where the string ends in the suffix "s" (indicating seconds) and
    is preceded by the number of seconds, with nanoseconds expressed as
    fractional seconds. For example, 3 seconds with 0 nanoseconds should be
    encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
    be expressed in JSON format as "3.000000001s", and 3 seconds and 1
    microsecond should be expressed in JSON format as "3.000001s".
    """

    seconds: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Signed seconds of the span of time. Must be from -315,576,000,000
    to +315,576,000,000 inclusive. Note: these bounds are computed from:
    60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
    """

    nanos: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Signed fractions of a second at nanosecond resolution of the span
    of time. Durations less than one second are represented with a 0
    `seconds` field and a positive or negative `nanos` field. For durations
    of one second or more, a non-zero value for the `nanos` field must be
    of the same sign as the `seconds` field. Must be from -999,999,999
    to +999,999,999 inclusive.
    """

    @classmethod
    def from_timedelta(
        cls,
        delta: datetime.timedelta,
        *,
        _1_microsecond: datetime.timedelta = datetime.timedelta(microseconds=1),
    ) -> "Duration":
        total_ms = delta // _1_microsecond
        seconds = int(total_ms / 1e6)
        nanos = int((total_ms % 1e6) * 1e3)
        return cls(seconds, nanos)

    def to_timedelta(self) -> datetime.timedelta:
        return datetime.timedelta(seconds=self.seconds, microseconds=self.nanos / 1e3)

    @staticmethod
    def delta_to_json(delta: datetime.timedelta) -> str:
        parts = str(delta.total_seconds()).split(".")
        if len(parts) > 1:
            while len(parts[1]) not in (3, 6, 9):
                parts[1] = f"{parts[1]}0"
        return f"{'.'.join(parts)}s"

    @classmethod
    def from_dict(cls, value):
        if isinstance(value, str):
            if not re.match(r"^\d+(\.\d+)?s$", value):
                raise ValueError(f"Invalid duration string: {value}")

            seconds = float(value[:-1])
            return Duration(
                seconds=int(seconds), nanos=int((seconds - int(seconds)) * 1e9)
            )

        return super().from_dict(value)

    def to_dict(
        self,
        *,
        output_format: betterproto2.OutputFormat = betterproto2.OutputFormat.PROTO_JSON,
        casing: betterproto2.Casing = betterproto2.Casing.CAMEL,
        include_default_values: bool = False,
    ) -> dict[str, typing.Any] | typing.Any:
        # If the output format is PYTHON, we should have kept the wrapped type without building the real class
        assert output_format == betterproto2.OutputFormat.PROTO_JSON

        assert 0 <= self.nanos < 1e9

        if self.nanos == 0:
            return f"{self.seconds}s"

        nanos = f"{self.nanos:09d}".rstrip("0")
        if len(nanos) < 3:
            nanos += "0" * (3 - len(nanos))

        return f"{self.seconds}.{nanos}s"

    @staticmethod
    def from_wrapped(wrapped: datetime.timedelta) -> "Duration":
        return Duration.from_timedelta(wrapped)

    def to_wrapped(self) -> datetime.timedelta:
        return self.to_timedelta()


default_message_pool.register_message("google.protobuf", "Duration", Duration)


@dataclass(eq=False, repr=False)
class Empty(betterproto2.Message):
    """
    A generic empty message that you can re-use to avoid defining duplicated
    empty messages in your APIs. A typical example is to use it as the request
    or the response type of an API method. For instance:

    ```
    service Foo {
      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
    }
    ```
    """

    pass


default_message_pool.register_message("google.protobuf", "Empty", Empty)


@dataclass(eq=False, repr=False)
class FieldMask(betterproto2.Message):
    """
    `FieldMask` represents a set of symbolic field paths, for example:

        paths: "f.a"
        paths: "f.b.d"

    Here `f` represents a field in some root message, `a` and `b`
    fields in the message found in `f`, and `d` a field found in the
    message in `f.b`.

    Field masks are used to specify a subset of fields that should be
    returned by a get operation or modified by an update operation.
    Field masks also have a custom JSON encoding (see below).

    # Field Masks in Projections

    When used in the context of a projection, a response message or
    sub-message is filtered by the API to only contain those fields as
    specified in the mask. For example, if the mask in the previous
    example is applied to a response message as follows:

        f {
          a : 22
          b {
            d : 1
            x : 2
          }
          y : 13
        }
        z: 8

    The result will not contain specific values for fields x,y and z
    (their value will be set to the default, and omitted in proto text
    output):

        f {
          a : 22
          b {
            d : 1
          }
        }

    A repeated field is not allowed except at the last position of a
    paths string.

    If a FieldMask object is not present in a get operation, the
    operation applies to all fields (as if a FieldMask of all fields
    had been specified).

    Note that a field mask does not necessarily apply to the
    top-level response message. In case of a REST get operation, the
    field mask applies directly to the response, but in case of a REST
    list operation, the mask instead applies to each individual message
    in the returned resource list. In case of a REST custom method,
    other definitions may be used. Where the mask applies will be
    clearly documented together with its declaration in the API.  In
    any case, the effect on the returned resource/resources is required
    behavior for APIs.

    # Field Masks in Update Operations

    A field mask in update operations specifies which fields of the
    targeted resource are going to be updated. The API is required
    to only change the values of the fields as specified in the mask
    and leave the others untouched. If a resource is passed in to
    describe the updated values, the API ignores the values of all
    fields not covered by the mask.

    If a repeated field is specified for an update operation, new values will
    be appended to the existing repeated field in the target resource. Note that
    a repeated field is only allowed in the last position of a `paths` string.

    If a sub-message is specified in the last position of the field mask for an
    update operation, then new value will be merged into the existing sub-message
    in the target resource.

    For example, given the target message:

        f {
          b {
            d: 1
            x: 2
          }
          c: [1]
        }

    And an update message:

        f {
          b {
            d: 10
          }
          c: [2]
        }

    then if the field mask is:

     paths: ["f.b", "f.c"]

    then the result will be:

        f {
          b {
            d: 10
            x: 2
          }
          c: [1, 2]
        }

    An implementation may provide options to override this default behavior for
    repeated and message fields.

    In order to reset a field's value to the default, the field must
    be in the mask and set to the default value in the provided resource.
    Hence, in order to reset all fields of a resource, provide a default
    instance of the resource and set all fields in the mask, or do
    not provide a mask as described below.

    If a field mask is not present on update, the operation applies to
    all fields (as if a field mask of all fields has been specified).
    Note that in the presence of schema evolution, this may mean that
    fields the client does not know and has therefore not filled into
    the request will be reset to their default. If this is unwanted
    behavior, a specific service may require a client to always specify
    a field mask, producing an error if not.

    As with get operations, the location of the resource which
    describes the updated values in the request message depends on the
    operation kind. In any case, the effect of the field mask is
    required to be honored by the API.

    ## Considerations for HTTP REST

    The HTTP kind of an update operation which uses a field mask must
    be set to PATCH instead of PUT in order to satisfy HTTP semantics
    (PUT must only be used for full updates).

    # JSON Encoding of Field Masks

    In JSON, a field mask is encoded as a single string where paths are
    separated by a comma. Fields name in each path are converted
    to/from lower-camel naming conventions.

    As an example, consider the following message declarations:

        message Profile {
          User user = 1;
          Photo photo = 2;
        }
        message User {
          string display_name = 1;
          string address = 2;
        }

    In proto a field mask for `Profile` may look as such:

        mask {
          paths: "user.display_name"
          paths: "photo"
        }

    In JSON, the same mask is represented as below:

        {
          mask: "user.displayName,photo"
        }

    # Field Masks and Oneof Fields

    Field masks treat fields in oneofs just as regular fields. Consider the
    following message:

        message SampleMessage {
          oneof test_oneof {
            string name = 4;
            SubMessage sub_message = 9;
          }
        }

    The field mask can be:

        mask {
          paths: "name"
        }

    Or:

        mask {
          paths: "sub_message"
        }

    Note that oneof type names ("test_oneof" in this case) cannot be used in
    paths.

    ## Field Mask Verification

    The implementation of any API method which has a FieldMask type field in the
    request should verify the included field paths, and return an
    `INVALID_ARGUMENT` error if any path is unmappable.
    """

    paths: "list[str]" = betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    """
    The set of field mask paths.
    """


default_message_pool.register_message("google.protobuf", "FieldMask", FieldMask)


@dataclass(eq=False, repr=False)
class ListValue(betterproto2.Message):
    """
    `ListValue` is a wrapper around a repeated field of values.

    The JSON representation for `ListValue` is JSON array.
    """

    values: "list[Value]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Repeated field of dynamically typed values.
    """


default_message_pool.register_message("google.protobuf", "ListValue", ListValue)


@dataclass(eq=False, repr=False)
class Struct(betterproto2.Message):
    """
    `Struct` represents a structured data value, consisting of fields
    which map to dynamically typed values. In some languages, `Struct`
    might be supported by a native representation. For example, in
    scripting languages like JS a struct is represented as an
    object. The details of that representation are described together
    with the proto support for the language.

    The JSON representation for `Struct` is JSON object.
    """

    fields: "dict[str, Value]" = betterproto2.field(
        1,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE
        ),
    )
    """
    Unordered map of dynamically typed values.
    """


default_message_pool.register_message("google.protobuf", "Struct", Struct)


@dataclass(eq=False, repr=False)
class Timestamp(betterproto2.Message):
    """
    A Timestamp represents a point in time independent of any time zone
    or calendar, represented as seconds and fractions of seconds at
    nanosecond resolution in UTC Epoch time. It is encoded using the
    Proleptic Gregorian Calendar which extends the Gregorian calendar
    backwards to year one. It is encoded assuming all minutes are 60
    seconds long, i.e. leap seconds are "smeared" so that no leap second
    table is needed for interpretation. Range is from
    `0001-01-01T00:00:00Z` to `9999-12-31T23:59:59.999999999Z`.
    Restricting to that range ensures that conversion to
    and from RFC 3339 date strings is possible.
    See [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).

    # Examples

    Example 1: Compute Timestamp from POSIX `time()`.

    ```
    Timestamp timestamp;
    timestamp.set_seconds(time(NULL));
    timestamp.set_nanos(0);
    ```

    Example 2: Compute Timestamp from POSIX `gettimeofday()`.

    ```
    struct timeval tv;
    gettimeofday(&tv, NULL);

    Timestamp timestamp;
    timestamp.set_seconds(tv.tv_sec);
    timestamp.set_nanos(tv.tv_usec * 1000);
    ```

    Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

    ```
    FILETIME ft;
    GetSystemTimeAsFileTime(&ft);
    UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

    // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
    // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
    Timestamp timestamp;
    timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
    timestamp.set_nanos((INT32) ((ticks % 10000000) * 100)); //
    ```

    Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

    ```
    long millis = System.currentTimeMillis();

    Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
        .setNanos((int) ((millis % 1000) * 1000000)).build();

    ```

    Example 5: Compute Timestamp from current time in Python.

    ```
    timestamp = Timestamp()
    timestamp.GetCurrentTime()
    ```

    # JSON Mapping

    In JSON format, the `Timestamp` type is encoded as a string in the
    [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
    format is `{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z`
    where `{year}` is always expressed using four digits while `{month}`, `{day}`,
    `{hour}`, `{min}`, and `{sec}` are zero-padded to two digits each. The fractional
    seconds, which can go up to 9 digits (so up to 1 nanosecond resolution),
    are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
    is required, though only UTC (as indicated by "Z") is presently supported.

    For example, `2017-01-15T01:30:15.01Z` encodes 15.01 seconds past
    01:30 UTC on January 15, 2017.

    In JavaScript, you can convert a `Date` object to this format using the
    standard [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
    method. In Python, you can convert a standard `datetime.datetime` object
    to this format using [`strftime`](https://docs.python.org/2/library/time.html#time.strftime)
    with the time format spec `%Y-%m-%dT%H:%M:%S.%fZ`. Likewise, in Java, you
    can use the Joda Time's [`ISODateTimeFormat.dateTime()`](
    http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime--)
    to obtain a formatter capable of generating timestamps in this format.
    """

    seconds: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Represents seconds of UTC time since Unix epoch
    `1970-01-01T00:00:00Z`. Must be from `0001-01-01T00:00:00Z` to
    `9999-12-31T23:59:59Z` inclusive.
    """

    nanos: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Non-negative fractions of a second at nanosecond resolution. Negative
    second values with fractions must still have non-negative nano values
    that count forward in time. Must be from 0 to 999,999,999
    inclusive.
    """

    @classmethod
    def from_datetime(cls, dt: datetime.datetime) -> "Timestamp":
        if not dt.tzinfo:
            raise ValueError("datetime must be timezone aware")

        dt = dt.astimezone(datetime.timezone.utc)

        # manual epoch offset calulation to avoid rounding errors,
        # to support negative timestamps (before 1970) and skirt
        # around datetime bugs (apparently 0 isn't a year in [0, 9999]??)
        offset = dt - datetime.datetime(1970, 1, 1, tzinfo=datetime.timezone.utc)
        # below is the same as timedelta.total_seconds() but without dividing by 1e6
        # so we end up with microseconds as integers instead of seconds as float
        offset_us = (
            offset.days * 24 * 60 * 60 + offset.seconds
        ) * 10**6 + offset.microseconds
        seconds, us = divmod(offset_us, 10**6)
        return cls(seconds, us * 1000)

    def to_datetime(self) -> datetime.datetime:
        # datetime.fromtimestamp() expects a timestamp in seconds, not microseconds
        # if we pass it as a floating point number, we will run into rounding errors
        # see also #407
        offset = datetime.timedelta(
            seconds=self.seconds, microseconds=self.nanos // 1000
        )
        return datetime.datetime(1970, 1, 1, tzinfo=datetime.timezone.utc) + offset

    @staticmethod
    def timestamp_to_json(dt: datetime.datetime) -> str:
        nanos = dt.microsecond * 1e3
        if dt.tzinfo is not None:
            # change timezone aware datetime objects to utc
            dt = dt.astimezone(datetime.timezone.utc)
        copy = dt.replace(microsecond=0, tzinfo=None)
        result = copy.isoformat()
        if (nanos % 1e9) == 0:
            # If there are 0 fractional digits, the fractional
            # point '.' should be omitted when serializing.
            return f"{result}Z"
        if (nanos % 1e6) == 0:
            # Serialize 3 fractional digits.
            return f"{result}.{int(nanos // 1e6):03d}Z"
        if (nanos % 1e3) == 0:
            # Serialize 6 fractional digits.
            return f"{result}.{int(nanos // 1e3):06d}Z"
        # Serialize 9 fractional digits.
        return f"{result}.{nanos:09d}"

    @classmethod
    def from_dict(cls, value):
        if isinstance(value, str):
            dt = dateutil.parser.isoparse(value)
            dt = dt.astimezone(datetime.timezone.utc)
            return Timestamp.from_datetime(dt)

        return super().from_dict(value)

    def to_dict(
        self,
        *,
        output_format: betterproto2.OutputFormat = betterproto2.OutputFormat.PROTO_JSON,
        casing: betterproto2.Casing = betterproto2.Casing.CAMEL,
        include_default_values: bool = False,
    ) -> dict[str, typing.Any] | typing.Any:
        # If the output format is PYTHON, we should have kept the wraped type without building the real class
        assert output_format == betterproto2.OutputFormat.PROTO_JSON

        return Timestamp.timestamp_to_json(self.to_datetime())

    @staticmethod
    def from_wrapped(wrapped: datetime.datetime) -> "Timestamp":
        return Timestamp.from_datetime(wrapped)

    def to_wrapped(self) -> datetime.datetime:
        return self.to_datetime()


default_message_pool.register_message("google.protobuf", "Timestamp", Timestamp)


@dataclass(eq=False, repr=False)
class Value(betterproto2.Message):
    """
    `Value` represents a dynamically typed value which can be either
    null, a number, a string, a boolean, a recursive struct value, or a
    list of values. A producer of value is expected to set one of these
    variants. Absence of any variant indicates an error.

    The JSON representation for `Value` is JSON value.

    Oneofs:
        - kind: The kind of value.
    """

    null_value: "NullValue | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True, group="kind"
    )
    """
    Represents a null value.
    """

    number_value: "float | None" = betterproto2.field(
        2, betterproto2.TYPE_DOUBLE, optional=True, group="kind"
    )
    """
    Represents a double value.
    """

    string_value: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True, group="kind"
    )
    """
    Represents a string value.
    """

    bool_value: "bool | None" = betterproto2.field(
        4, betterproto2.TYPE_BOOL, optional=True, group="kind"
    )
    """
    Represents a boolean value.
    """

    struct_value: "Struct | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Represents a structured value.
    """

    list_value: "ListValue | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Represents a repeated `Value`.
    """


default_message_pool.register_message("google.protobuf", "Value", Value)
