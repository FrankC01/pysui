# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: node_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import TYPE_CHECKING

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import types as __types__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class GetNodeInfoRequest(betterproto.Message):
    """Request message for `NodeService.GetNodeInfo`."""

    pass


@dataclass(eq=False, repr=False)
class GetNodeInfoResponse(betterproto.Message):
    """Response message for `NodeService.GetNodeInfo`."""

    chain_id: "__types__.Digest | None" = betterproto.message_field(1, optional=True)
    """
    The chain identifier of the chain that this node is on.
    
     The chain identifier is the digest of the genesis checkpoint, the
     checkpoint with sequence number 0.
    """

    chain: "str | None" = betterproto.string_field(2, optional=True)
    """
    Human-readable name of the chain that this node is on.
    
     This is intended to be a human-readable name like `mainnet`, `testnet`, and so on.
    """

    epoch: "int | None" = betterproto.uint64_field(3, optional=True)
    """Current epoch of the node based on its highest executed checkpoint."""

    checkpoint_height: "int | None" = betterproto.uint64_field(4, optional=True)
    """Checkpoint height of the most recently executed checkpoint."""

    timestamp: "datetime | None" = betterproto.message_field(5, optional=True)
    """Unix timestamp of the most recently executed checkpoint."""

    lowest_available_checkpoint: "int | None" = betterproto.uint64_field(
        6, optional=True
    )
    """
    The lowest checkpoint for which checkpoints and transaction data are available.
    """

    lowest_available_checkpoint_objects: "int | None" = betterproto.uint64_field(
        7, optional=True
    )
    """The lowest checkpoint for which object data is available."""

    software_version: "str | None" = betterproto.string_field(8, optional=True)
    """Software version of the `sui-node` binary."""


@dataclass(eq=False, repr=False)
class GetCommitteeRequest(betterproto.Message):
    """Request message for NodeService.GetCommittee."""

    epoch: "int | None" = betterproto.uint64_field(1, optional=True)
    """
    Request the sui.types.ValidatorCommittee corresponding to the
     provided epoch. If no epoch is provided the committee for the current
     epoch will be returned.
    """


@dataclass(eq=False, repr=False)
class GetCommitteeResponse(betterproto.Message):
    """Response message for `NodeService.GetCommittee`."""

    committee: "__types__.ValidatorCommittee | None" = betterproto.message_field(
        1, optional=True
    )
    """The committee of either the requested epoch or the current epoch."""


@dataclass(eq=False, repr=False)
class GetTransactionRequest(betterproto.Message):
    """Request message for `NodeService.GetTransaction`."""

    digest: "__types__.Digest | None" = betterproto.message_field(1, optional=True)
    """Required. The digest of the requested transaction."""

    read_mask: "betterproto_lib_google_protobuf.FieldMask | None" = (
        betterproto.message_field(4, optional=True)
    )
    """
    Mask specifying which fields to read.
     If no mask is specified, defaults to `digest`.
    """


@dataclass(eq=False, repr=False)
class GetTransactionResponse(betterproto.Message):
    """Response message for `NodeService.GetTransactio`n."""

    digest: "__types__.Digest | None" = betterproto.message_field(1, optional=True)
    """
    The digest of this [Transaction](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.Transaction.html).
    """

    transaction: "__types__.Transaction | None" = betterproto.message_field(
        2, optional=True
    )
    """The transaction itself."""

    transaction_bcs: "__types__.Bcs | None" = betterproto.message_field(
        3, optional=True
    )
    """
    The
     [Transaction](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.Transaction.html)
     encoded as BCS bytes.
    """

    signatures: "list[__types__.UserSignature]" = betterproto.message_field(4)
    """
    List of user signatures that are used to authorize the
     execution of this transaction.
    """

    signatures_bytes: "list[bytes]" = betterproto.bytes_field(11)
    """
    List of
     [UserSignature](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.UserSignature.html)s
     encoded as bytes.
    """

    effects: "__types__.TransactionEffects | None" = betterproto.message_field(
        5, optional=True
    )
    """The `TransactionEffects` for this transaction."""

    effects_bcs: "__types__.Bcs | None" = betterproto.message_field(6, optional=True)
    """
    The
     [TransactionEffects](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.TransactionEffects.html)
     for this transaction encoded as BCS bytes.
    """

    events: "__types__.TransactionEvents | None" = betterproto.message_field(
        7, optional=True
    )
    """
    The `TransactionEvents` for this transaction.
    
     This field might be empty, even if it was explicitly requested, if the
     transaction didn't produce any events.
     `sui.types.TransactionEffects.events_digest` is populated if the
     transaction produced any events.
    """

    events_bcs: "__types__.Bcs | None" = betterproto.message_field(8, optional=True)
    """
    The
     [TransactionEvents](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.TransactionEvents.html)
     for this transaction encoded as BCS bytes.
    """

    checkpoint: "int | None" = betterproto.uint64_field(9, optional=True)
    """
    The sequence number for the checkpoint that includes this transaction.
    """

    timestamp: "datetime | None" = betterproto.message_field(10, optional=True)
    """The Unix timestamp of the checkpoint that includes this transaction."""


@dataclass(eq=False, repr=False)
class GetObjectRequest(betterproto.Message):
    """Request message for `NodeService.GetObject`."""

    object_id: "__types__.ObjectId | None" = betterproto.message_field(1, optional=True)
    """Required. The `ObjectId` of the requested object."""

    version: "int | None" = betterproto.uint64_field(2, optional=True)
    """
    Request a specific version of the object.
     If no version is specified, and the object is live, then the latest
     version of the object is returned.
    """

    read_mask: "betterproto_lib_google_protobuf.FieldMask | None" = (
        betterproto.message_field(4, optional=True)
    )
    """
    Mask specifying which fields to read.
     If no mask is specified, defaults to `object_id,version,digest`.
    """


@dataclass(eq=False, repr=False)
class GetObjectResponse(betterproto.Message):
    """Response message for `NodeService.GetObject`."""

    object_id: "__types__.ObjectId | None" = betterproto.message_field(1, optional=True)
    """The `ObjectId` of this object."""

    version: "int | None" = betterproto.uint64_field(2, optional=True)
    """The version of this object."""

    digest: "__types__.Digest | None" = betterproto.message_field(3, optional=True)
    """The digest of this object."""

    object: "__types__.Object | None" = betterproto.message_field(4, optional=True)
    """The object itself."""

    object_bcs: "__types__.Bcs | None" = betterproto.message_field(5, optional=True)
    """
    The
     [Object](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.Object.html)
     encoded as BCS bytes.
    """


@dataclass(eq=False, repr=False)
class GetCheckpointRequest(betterproto.Message):
    """
    Request message for `NodeService.GetCheckpoint`.

     At most, provide one of `sequence_number` or `digest`. An error is
     returned if you attempt to provide both. If you provide neither, the service
     returns the latest executed checkpoint.
    """

    sequence_number: "int | None" = betterproto.uint64_field(1, optional=True)
    """The sequence number of the requested checkpoint."""

    digest: "__types__.Digest | None" = betterproto.message_field(2, optional=True)
    """The digest of the requested checkpoint."""

    read_mask: "betterproto_lib_google_protobuf.FieldMask | None" = (
        betterproto.message_field(4, optional=True)
    )
    """
    Mask specifying which fields to read.
     If no mask is specified, defaults to `sequence_number,digest`.
    """


@dataclass(eq=False, repr=False)
class GetCheckpointResponse(betterproto.Message):
    """Response message for `NodeService.GetCheckpoint`."""

    sequence_number: "int | None" = betterproto.uint64_field(1, optional=True)
    """The sequence number of this checkpoint."""

    digest: "__types__.Digest | None" = betterproto.message_field(2, optional=True)
    """The digest of this checkpoint's `CheckpointSummary`."""

    summary: "__types__.CheckpointSummary | None" = betterproto.message_field(
        3, optional=True
    )
    """The `CheckpointSummary` for this checkpoint."""

    summary_bcs: "__types__.Bcs | None" = betterproto.message_field(4, optional=True)
    """
    The
     [CheckpointSummary](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.CheckpointSummary.html)
     for this checkpoint encoded as BCS bytes.
    """

    signature: "__types__.ValidatorAggregatedSignature | None" = (
        betterproto.message_field(5, optional=True)
    )
    """
    An aggregated quorum signature from the validator committee that
     certifies this checkpoint.
    """

    contents: "__types__.CheckpointContents | None" = betterproto.message_field(
        6, optional=True
    )
    """The `CheckpointContents` for this checkpoint."""

    contents_bcs: "__types__.Bcs | None" = betterproto.message_field(7, optional=True)
    """
    The
     [CheckpointContents](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.CheckpointContents.html)
     for this checkpoint encoded as BCS bytes.
    """


@dataclass(eq=False, repr=False)
class GetFullCheckpointRequest(betterproto.Message):
    """
    Request message for `NodeService.GetFullCheckpoint`.

     At most, provide one of `sequence_number` or `digest`. An error is
     returned if you provide both. If you provide neither, the service
     returns the latest executed checkpoint.
    """

    sequence_number: "int | None" = betterproto.uint64_field(1, optional=True)
    """The sequence number of the requested checkpoint."""

    digest: "__types__.Digest | None" = betterproto.message_field(2, optional=True)
    """The digest of the requested checkpoint."""

    read_mask: "betterproto_lib_google_protobuf.FieldMask | None" = (
        betterproto.message_field(4, optional=True)
    )
    """
    Mask specifying which fields to read.
     If no mask is specified, defaults to `sequence_number,digest`.
    """


@dataclass(eq=False, repr=False)
class GetFullCheckpointResponse(betterproto.Message):
    """Response message for `NodeService.GetFullCheckpoint`."""

    sequence_number: "int | None" = betterproto.uint64_field(1, optional=True)
    """The sequence number of this checkpoint."""

    digest: "__types__.Digest | None" = betterproto.message_field(2, optional=True)
    """The digest of this checkpoint's `CheckpointSummary`."""

    summary: "__types__.CheckpointSummary | None" = betterproto.message_field(
        3, optional=True
    )
    """The `CheckpointSummary` for this checkpoint."""

    summary_bcs: "__types__.Bcs | None" = betterproto.message_field(4, optional=True)
    """
    The
     [CheckpointSummary](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.CheckpointSummary.html)
     for this checkpoint encoded as BCS bytes.
    """

    signature: "__types__.ValidatorAggregatedSignature | None" = (
        betterproto.message_field(5, optional=True)
    )
    """
    An aggregated quorum signature from the validator committee that
     certifies this checkpoint.
    """

    contents: "__types__.CheckpointContents | None" = betterproto.message_field(
        6, optional=True
    )
    """The `CheckpointContents` for this checkpoint."""

    contents_bcs: "__types__.Bcs | None" = betterproto.message_field(7, optional=True)
    """
    The
     [CheckpointContents](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.CheckpointContents.html)
     for this checkpoint encoded as BCS bytes.
    """

    transactions: "list[FullCheckpointTransaction]" = betterproto.message_field(8)
    """List of transactions included in this checkpoint."""


@dataclass(eq=False, repr=False)
class FullCheckpointTransaction(betterproto.Message):
    """A transaction, with all of its inputs and outputs."""

    digest: "__types__.Digest | None" = betterproto.message_field(1, optional=True)
    """The digest of this transaction."""

    transaction: "__types__.Transaction | None" = betterproto.message_field(
        2, optional=True
    )
    """The transaction itself."""

    transaction_bcs: "__types__.Bcs | None" = betterproto.message_field(
        3, optional=True
    )
    """
    The
     [Transaction](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.Transaction.html)
     encoded as BCS bytes.
    """

    effects: "__types__.TransactionEffects | None" = betterproto.message_field(
        5, optional=True
    )
    """The `TransactionEffects` for this transaction."""

    effects_bcs: "__types__.Bcs | None" = betterproto.message_field(6, optional=True)
    """
    The
     [TransactionEffects](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.TransactionEffects.html)
     for this transaction encoded as BCS bytes.
    """

    events: "__types__.TransactionEvents | None" = betterproto.message_field(
        7, optional=True
    )
    """
    The `TransactionEvents` for this transaction.
    
     This field might be empty, even if it was explicitly requested, if the
     transaction didn't produce any events.
     `sui.types.TransactionEffects.events_digest` is populated if the
     transaction produced any events.
    """

    events_bcs: "__types__.Bcs | None" = betterproto.message_field(8, optional=True)
    """
    The
     [TransactionEvents](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.TransactionEvents.html)
     for this transaction encoded as BCS bytes.
    """

    input_objects: "list[FullCheckpointObject]" = betterproto.message_field(13)
    """Set of input objects used during the execution of this transaction."""

    output_objects: "list[FullCheckpointObject]" = betterproto.message_field(14)
    """
    Set of output objects produced from the execution of this transaction.
    """


@dataclass(eq=False, repr=False)
class FullCheckpointObject(betterproto.Message):
    """An object used by or produced from a transaction."""

    object_id: "__types__.ObjectId | None" = betterproto.message_field(1, optional=True)
    """The `ObjectId` of this object."""

    version: "int | None" = betterproto.uint64_field(2, optional=True)
    """The version of this object."""

    digest: "__types__.Digest | None" = betterproto.message_field(3, optional=True)
    """The digest of this object."""

    object: "__types__.Object | None" = betterproto.message_field(4, optional=True)
    """The object itself."""

    object_bcs: "__types__.Bcs | None" = betterproto.message_field(5, optional=True)
    """
    The
     [object](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.Object.html)
     encoded as BCS bytes.
    """


@dataclass(eq=False, repr=False)
class ExecuteTransactionRequest(betterproto.Message):
    """
    Request message for `NodeService.ExecuteTransaction`.

     Note: You must provide only one of `transaction` or `transaction_bcs`.
    """

    transaction: "__types__.Transaction | None" = betterproto.message_field(
        1, optional=True
    )
    """The transaction to execute."""

    transaction_bcs: "__types__.Bcs | None" = betterproto.message_field(
        2, optional=True
    )
    """The transaction to execute, encoded as BCS bytes."""

    signatures: "list[__types__.UserSignature]" = betterproto.message_field(3)
    """
    Set of `UserSiganture`s authorizing the execution of the provided
     transaction.
    """

    signatures_bytes: "list[bytes]" = betterproto.bytes_field(4)
    """
    Set of `UserSiganture`s authorizing the execution of the provided
     transaction, encoded as bytes.
    """

    read_mask: "betterproto_lib_google_protobuf.FieldMask | None" = (
        betterproto.message_field(6, optional=True)
    )
    """
    Mask specifying which fields to read.
     If no mask is specified, defaults to `effects,events,finality`.
    """


@dataclass(eq=False, repr=False)
class ExecuteTransactionResponse(betterproto.Message):
    """Response message for `NodeService.ExecuteTransaction`."""

    finality: "EffectsFinality | None" = betterproto.message_field(1, optional=True)
    """Indicates the finality of the executed transaction."""

    effects: "__types__.TransactionEffects | None" = betterproto.message_field(
        2, optional=True
    )
    """The `TransactionEffects` for this transaction."""

    effects_bcs: "__types__.Bcs | None" = betterproto.message_field(3, optional=True)
    """
    The
     [TransactionEffects](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.TransactionEffects.html)
     for this transaction encoded as BCS bytes.
    """

    events: "__types__.TransactionEvents | None" = betterproto.message_field(
        4, optional=True
    )
    """
    The `TransactionEvents` for this transaction.
    
     This field might be empty, even if it was explicitly requested, if the
     transaction didn't produce any events.
     `sui.types.TransactionEffects.events_digest` is populated if the
     transaction produced any events.
    """

    events_bcs: "__types__.Bcs | None" = betterproto.message_field(5, optional=True)
    """
    The
     [TransactionEvents](https://docs.rs/sui-sdk-types/latest/sui_sdk_types/struct.TransactionEvents.html)
     for this transaction encoded as BCS bytes.
    """

    balance_changes: "list[BalanceChange]" = betterproto.message_field(6)
    """
    Set of balance change events as a result of this transaction.
    
     This set of events are calculated by analyzing all input and output `Coin`
     type objects.
    """


@dataclass(eq=False, repr=False)
class BalanceChange(betterproto.Message):
    """
    The delta, or change, in balance for an address for a particular `Coin` type.
    """

    address: "__types__.Address | None" = betterproto.message_field(1, optional=True)
    """The account address that is affected by this balance change event."""

    coin_type: "__types__.TypeTag | None" = betterproto.message_field(2, optional=True)
    """The `Coin` type of this balance change event."""

    amount: "__types__.I128 | None" = betterproto.message_field(3, optional=True)
    """The amount or change in balance."""


@dataclass(eq=False, repr=False)
class EffectsFinality(betterproto.Message):
    """Indicates the finality of the executed transaction."""

    certified: "__types__.ValidatorAggregatedSignature" = betterproto.message_field(
        1, group="finality"
    )
    """
    A quorum certificate certifying that a transaction is final but might not
     be included in a checkpoint yet.
    """

    checkpointed: int = betterproto.uint64_field(2, group="finality")
    """Sequence number of the checkpoint that includes the transaction."""

    quorum_executed: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(3, group="finality")
    )
    """
    Indicates that a quorum of validators has executed the transaction but
     that it might not be included in a checkpoint yet.
    """


class NodeServiceStub(betterproto.ServiceStub):
    async def get_node_info(
        self,
        get_node_info_request: "GetNodeInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "GetNodeInfoResponse":
        return await self._unary_unary(
            "/sui.node.v2.NodeService/GetNodeInfo",
            get_node_info_request,
            GetNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_committee(
        self,
        get_committee_request: "GetCommitteeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "GetCommitteeResponse":
        return await self._unary_unary(
            "/sui.node.v2.NodeService/GetCommittee",
            get_committee_request,
            GetCommitteeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_object(
        self,
        get_object_request: "GetObjectRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "GetObjectResponse":
        return await self._unary_unary(
            "/sui.node.v2.NodeService/GetObject",
            get_object_request,
            GetObjectResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_transaction(
        self,
        get_transaction_request: "GetTransactionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "GetTransactionResponse":
        return await self._unary_unary(
            "/sui.node.v2.NodeService/GetTransaction",
            get_transaction_request,
            GetTransactionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_checkpoint(
        self,
        get_checkpoint_request: "GetCheckpointRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "GetCheckpointResponse":
        return await self._unary_unary(
            "/sui.node.v2.NodeService/GetCheckpoint",
            get_checkpoint_request,
            GetCheckpointResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_full_checkpoint(
        self,
        get_full_checkpoint_request: "GetFullCheckpointRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "GetFullCheckpointResponse":
        return await self._unary_unary(
            "/sui.node.v2.NodeService/GetFullCheckpoint",
            get_full_checkpoint_request,
            GetFullCheckpointResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def execute_transaction(
        self,
        execute_transaction_request: "ExecuteTransactionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None
    ) -> "ExecuteTransactionResponse":
        return await self._unary_unary(
            "/sui.node.v2.NodeService/ExecuteTransaction",
            execute_transaction_request,
            ExecuteTransactionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class NodeServiceBase(ServiceBase):

    async def get_node_info(
        self, get_node_info_request: "GetNodeInfoRequest"
    ) -> "GetNodeInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_committee(
        self, get_committee_request: "GetCommitteeRequest"
    ) -> "GetCommitteeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_object(
        self, get_object_request: "GetObjectRequest"
    ) -> "GetObjectResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_transaction(
        self, get_transaction_request: "GetTransactionRequest"
    ) -> "GetTransactionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_checkpoint(
        self, get_checkpoint_request: "GetCheckpointRequest"
    ) -> "GetCheckpointResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_full_checkpoint(
        self, get_full_checkpoint_request: "GetFullCheckpointRequest"
    ) -> "GetFullCheckpointResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def execute_transaction(
        self, execute_transaction_request: "ExecuteTransactionRequest"
    ) -> "ExecuteTransactionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_node_info(
        self, stream: "grpclib.server.Stream[GetNodeInfoRequest, GetNodeInfoResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_node_info(request)
        await stream.send_message(response)

    async def __rpc_get_committee(
        self, stream: "grpclib.server.Stream[GetCommitteeRequest, GetCommitteeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_committee(request)
        await stream.send_message(response)

    async def __rpc_get_object(
        self, stream: "grpclib.server.Stream[GetObjectRequest, GetObjectResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_object(request)
        await stream.send_message(response)

    async def __rpc_get_transaction(
        self,
        stream: "grpclib.server.Stream[GetTransactionRequest, GetTransactionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_transaction(request)
        await stream.send_message(response)

    async def __rpc_get_checkpoint(
        self,
        stream: "grpclib.server.Stream[GetCheckpointRequest, GetCheckpointResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_checkpoint(request)
        await stream.send_message(response)

    async def __rpc_get_full_checkpoint(
        self,
        stream: "grpclib.server.Stream[GetFullCheckpointRequest, GetFullCheckpointResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_full_checkpoint(request)
        await stream.send_message(response)

    async def __rpc_execute_transaction(
        self,
        stream: "grpclib.server.Stream[ExecuteTransactionRequest, ExecuteTransactionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_transaction(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/sui.node.v2.NodeService/GetNodeInfo": grpclib.const.Handler(
                self.__rpc_get_node_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNodeInfoRequest,
                GetNodeInfoResponse,
            ),
            "/sui.node.v2.NodeService/GetCommittee": grpclib.const.Handler(
                self.__rpc_get_committee,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCommitteeRequest,
                GetCommitteeResponse,
            ),
            "/sui.node.v2.NodeService/GetObject": grpclib.const.Handler(
                self.__rpc_get_object,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetObjectRequest,
                GetObjectResponse,
            ),
            "/sui.node.v2.NodeService/GetTransaction": grpclib.const.Handler(
                self.__rpc_get_transaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTransactionRequest,
                GetTransactionResponse,
            ),
            "/sui.node.v2.NodeService/GetCheckpoint": grpclib.const.Handler(
                self.__rpc_get_checkpoint,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCheckpointRequest,
                GetCheckpointResponse,
            ),
            "/sui.node.v2.NodeService/GetFullCheckpoint": grpclib.const.Handler(
                self.__rpc_get_full_checkpoint,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetFullCheckpointRequest,
                GetFullCheckpointResponse,
            ),
            "/sui.node.v2.NodeService/ExecuteTransaction": grpclib.const.Handler(
                self.__rpc_execute_transaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExecuteTransactionRequest,
                ExecuteTransactionResponse,
            ),
        }
