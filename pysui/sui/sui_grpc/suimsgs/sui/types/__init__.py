# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sui/types/types.proto
# plugin: python-betterproto
# This file has been @generated
import builtins
from dataclasses import dataclass

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf


@dataclass(eq=False, repr=False)
class Address(betterproto.Message):
    """
    Unique identifier for an account on the Sui blockchain.

     An `Address` is a 32-byte pseudonymous identifier used to uniquely identify an account and
     asset-ownership on the Sui blockchain. Often, human-readable addresses are encoded in
     hexadecimal with a `0x` prefix. For example, this is a valid Sui address:
     `0x02a212de6a9dfa3a69e22387acfbafbb1a9e591bd9d636e7895dcfc8de05f331`.
    """

    address: "bytes | None" = betterproto.bytes_field(1, optional=True)
    """32-byte address."""


@dataclass(eq=False, repr=False)
class ObjectId(betterproto.Message):
    """
    Unique identifier for an object on the Sui blockchain.

     An `ObjectId` is a 32-byte identifier used to uniquely identify an object on the Sui
     blockchain.
    """

    object_id: "bytes | None" = betterproto.bytes_field(1, optional=True)
    """32-byte object-id."""


@dataclass(eq=False, repr=False)
class Digest(betterproto.Message):
    """
    32-byte output of hashing a Sui structure using the Blake2b256 hash function.
    """

    digest: "bytes | None" = betterproto.bytes_field(1, optional=True)
    """32-byte hash."""


@dataclass(eq=False, repr=False)
class Bcs(betterproto.Message):
    """
    Message that represents a type that is serialized and encoded using the
     [BCS](https://mystenlabs.github.io/sui-rust-sdk/sui_sdk_types/index.html#bcs)
     format.
    """

    bcs: "bytes | None" = betterproto.bytes_field(1, optional=True)
    """Bytes of a BCS encoded value."""


@dataclass(eq=False, repr=False)
class U128(betterproto.Message):
    """An unsigned 128-bit integer encoded in little-endian using 16-bytes."""

    bytes: "builtins.bytes | None" = betterproto.bytes_field(1, optional=True)
    """16-byte little-endian bytes."""


@dataclass(eq=False, repr=False)
class I128(betterproto.Message):
    """A signed 128-bit integer encoded in little-endian using 16-bytes."""

    bytes: "builtins.bytes | None" = betterproto.bytes_field(1, optional=True)
    """16-byte little-endian bytes."""


@dataclass(eq=False, repr=False)
class U256(betterproto.Message):
    """An unsigned 256-bit integer encoded in little-endian using 32-bytes."""

    bytes: "builtins.bytes | None" = betterproto.bytes_field(1, optional=True)
    """16-byte little-endian bytes."""


@dataclass(eq=False, repr=False)
class CheckpointSummary(betterproto.Message):
    """
    A header for a checkpoint on the Sui blockchain.

     On the Sui network, checkpoints define the history of the blockchain. They are quite similar to
     the concept of blocks used by other blockchains like Bitcoin or Ethereum. The Sui blockchain,
     however, forms checkpoints after transaction execution has already happened to provide a
     certified history of the chain, instead of being formed before execution.

     Checkpoints commit to a variety of state, including but not limited to:
     - The hash of the previous checkpoint.
     - The set of transaction digests, their corresponding effects digests, as well as the set of
       user signatures that authorized its execution.
     - The objects produced by a transaction.
     - The set of live objects that make up the current state of the chain.
     - On epoch transitions, the next validator committee.

     `CheckpointSummary`s themselves don't directly include all of the previous information but they
     are the top-level type by which all the information is committed to transitively via cryptographic
     hashes included in the summary. `CheckpointSummary`s are signed and certified by a quorum of
     the validator committee in a given epoch to allow verification of the chain's state.
    """

    epoch: "int | None" = betterproto.uint64_field(1, optional=True)
    """Epoch that this checkpoint belongs to."""

    sequence_number: "int | None" = betterproto.uint64_field(2, optional=True)
    """The height of this checkpoint."""

    total_network_transactions: "int | None" = betterproto.uint64_field(
        3, optional=True
    )
    """
    Total number of transactions committed since genesis, including those in this
     checkpoint.
    """

    content_digest: "Digest | None" = betterproto.message_field(4, optional=True)
    """The hash of the `CheckpointContents` for this checkpoint."""

    previous_digest: "Digest | None" = betterproto.message_field(5, optional=True)
    """
    The hash of the previous `CheckpointSummary`.
    
     This will be `None` only for the first, or genesis, checkpoint.
    """

    epoch_rolling_gas_cost_summary: "GasCostSummary | None" = betterproto.message_field(
        6, optional=True
    )
    """
    The running total gas costs of all transactions included in the current epoch so far
     until this checkpoint.
    """

    timestamp_ms: "int | None" = betterproto.uint64_field(7, optional=True)
    """
    Timestamp of the checkpoint - number of milliseconds from the Unix epoch
     Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent
     checkpoints can have the same timestamp if they originate from the same underlining consensus commit.
    """

    commitments: "list[CheckpointCommitment]" = betterproto.message_field(8)
    """Commitments to checkpoint-specific state."""

    end_of_epoch_data: "EndOfEpochData | None" = betterproto.message_field(
        9, optional=True
    )
    """Extra data only present in the final checkpoint of an epoch."""

    version_specific_data: "bytes | None" = betterproto.bytes_field(10, optional=True)
    """
    `CheckpointSummary` is not an evolvable structure - it must be readable by any version of
     the code. Therefore, to allow extensions to be added to `CheckpointSummary`,
     opaque data can be added to checkpoints, which can be deserialized based on the current
     protocol version.
    """


@dataclass(eq=False, repr=False)
class CheckpointCommitment(betterproto.Message):
    """A commitment made by a checkpoint."""

    ecmh_live_object_set: "Digest" = betterproto.message_field(1, group="commitment")
    """
    An elliptic curve multiset hash attesting to the set of objects that comprise the live
     state of the Sui blockchain.
    """


@dataclass(eq=False, repr=False)
class EndOfEpochData(betterproto.Message):
    """
    Data, which when included in a `CheckpointSummary`, signals the end of an `Epoch`.
    """

    next_epoch_committee: "list[ValidatorCommitteeMember]" = betterproto.message_field(
        1
    )
    """
    The set of validators that will be in the `ValidatorCommittee` for the next epoch.
    """

    next_epoch_protocol_version: "int | None" = betterproto.uint64_field(
        2, optional=True
    )
    """The protocol version that is in effect during the next epoch."""

    epoch_commitments: "list[CheckpointCommitment]" = betterproto.message_field(3)
    """Commitments to epoch specific state (live object set)"""


@dataclass(eq=False, repr=False)
class CheckpointedTransactionInfo(betterproto.Message):
    """Transaction information committed to in a checkpoint."""

    transaction: "Digest | None" = betterproto.message_field(1, optional=True)
    """Digest of the transaction."""

    effects: "Digest | None" = betterproto.message_field(2, optional=True)
    """Digest of the effects."""

    signatures: "list[UserSignature]" = betterproto.message_field(3)
    """Set of user signatures that authorized the transaction."""


@dataclass(eq=False, repr=False)
class CheckpointContents(betterproto.Message):
    """The committed to contents of a checkpoint."""

    v1: "CheckpointContentsV1" = betterproto.message_field(1, group="contents")


@dataclass(eq=False, repr=False)
class CheckpointContentsV1(betterproto.Message):
    """Version 1 of `CheckpointContents`."""

    transactions: "list[CheckpointedTransactionInfo]" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TransactionEvents(betterproto.Message):
    """Events emitted during the successful execution of a transaction."""

    events: "list[Event]" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Event(betterproto.Message):
    """An event."""

    package_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """
    Package ID of the top-level function invoked by a `MoveCall` command that triggered this
     event to be emitted.
    """

    module: "Identifier | None" = betterproto.message_field(2, optional=True)
    """
    Module name of the top-level function invoked by a `MoveCall` command that triggered this
     event to be emitted.
    """

    sender: "Address | None" = betterproto.message_field(3, optional=True)
    """
    Address of the account that sent the transaction where this event was emitted.
    """

    event_type: "StructTag | None" = betterproto.message_field(4, optional=True)
    """The type of the event emitted."""

    contents: "bytes | None" = betterproto.bytes_field(5, optional=True)
    """BCS serialized bytes of the event."""


@dataclass(eq=False, repr=False)
class ObjectReference(betterproto.Message):
    """Reference to an object."""

    object_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """The object ID of this object."""

    version: "int | None" = betterproto.uint64_field(2, optional=True)
    """The version of this object."""

    digest: "Digest | None" = betterproto.message_field(3, optional=True)
    """The digest of this object."""


@dataclass(eq=False, repr=False)
class MovePackage(betterproto.Message):
    """A Move package."""

    id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """Address or ID of this package."""

    version: "int | None" = betterproto.uint64_field(2, optional=True)
    """Version of the package."""

    modules: "list[MoveModule]" = betterproto.message_field(3)
    """Set of modules defined by this package."""

    type_origin_table: "list[TypeOrigin]" = betterproto.message_field(4)
    """
    Maps struct/module to a package version where it was first defined, stored as a vector for
     simple serialization and deserialization.
    """

    linkage_table: "list[UpgradeInfo]" = betterproto.message_field(5)
    """
    For each dependency, maps original package ID to the info about the (upgraded) dependency
     version that this package is using.
    """


@dataclass(eq=False, repr=False)
class MoveModule(betterproto.Message):
    """Module defined by a package."""

    name: "Identifier | None" = betterproto.message_field(1, optional=True)
    """Name of the module."""

    contents: "bytes | None" = betterproto.bytes_field(2, optional=True)
    """Serialized bytecode of the module."""


@dataclass(eq=False, repr=False)
class TypeOrigin(betterproto.Message):
    """Identifies a struct and the module it was defined in."""

    module_name: "Identifier | None" = betterproto.message_field(1, optional=True)
    struct_name: "Identifier | None" = betterproto.message_field(2, optional=True)
    package_id: "ObjectId | None" = betterproto.message_field(3, optional=True)


@dataclass(eq=False, repr=False)
class UpgradeInfo(betterproto.Message):
    """/ Upgraded package info for the linkage table."""

    original_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """ID of the original package."""

    upgraded_id: "ObjectId | None" = betterproto.message_field(2, optional=True)
    """ID of the upgraded package."""

    upgraded_version: "int | None" = betterproto.uint64_field(3, optional=True)
    """Version of the upgraded package."""


@dataclass(eq=False, repr=False)
class Owner(betterproto.Message):
    """Enum of different types of ownership for an object."""

    address: "Address" = betterproto.message_field(1, group="kind")
    """Object is exclusively owned by a single address, and is mutable."""

    object: "ObjectId" = betterproto.message_field(2, group="kind")
    """Object is exclusively owned by a single object, and is mutable."""

    shared: int = betterproto.uint64_field(3, group="kind")
    """Object is shared, can be used by any address, and is mutable."""

    immutable: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        4, group="kind"
    )
    """Object is immutable, and hence ownership doesn't matter."""


@dataclass(eq=False, repr=False)
class MoveStruct(betterproto.Message):
    """A Move struct."""

    object_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """`ObjectId` for this object."""

    object_type: "StructTag | None" = betterproto.message_field(2, optional=True)
    """The type of this object."""

    has_public_transfer: "bool | None" = betterproto.bool_field(3, optional=True)
    """
    DEPRECATED this field is no longer used to determine whether a tx can transfer this
     object. Instead, it is always calculated from the objects type when loaded in execution.
    """

    version: "int | None" = betterproto.uint64_field(4, optional=True)
    """Version of the object."""

    contents: "bytes | None" = betterproto.bytes_field(5, optional=True)
    """BCS bytes of a Move struct value."""


@dataclass(eq=False, repr=False)
class Object(betterproto.Message):
    """An object on the Sui blockchain."""

    object_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """`ObjectId` for this object."""

    version: "int | None" = betterproto.uint64_field(2, optional=True)
    """Version of the object."""

    owner: "Owner | None" = betterproto.message_field(3, optional=True)
    """Owner of the object."""

    object: "ObjectData | None" = betterproto.message_field(4, optional=True)
    previous_transaction: "Digest | None" = betterproto.message_field(5, optional=True)
    """
    The digest of the transaction that created or last mutated this object
    """

    storage_rebate: "int | None" = betterproto.uint64_field(6, optional=True)
    """
    The amount of SUI to rebate if this object gets deleted.
     This number is re-calculated each time the object is mutated based on
     the present storage gas price.
    """


@dataclass(eq=False, repr=False)
class ObjectData(betterproto.Message):
    """Object data, either a package or struct."""

    struct: "MoveStruct" = betterproto.message_field(1, group="kind")
    package: "MovePackage" = betterproto.message_field(2, group="kind")


@dataclass(eq=False, repr=False)
class GenesisObject(betterproto.Message):
    """An object part of the initial chain state."""

    object_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    version: "int | None" = betterproto.uint64_field(2, optional=True)
    owner: "Owner | None" = betterproto.message_field(3, optional=True)
    object: "ObjectData | None" = betterproto.message_field(4, optional=True)


@dataclass(eq=False, repr=False)
class GasCostSummary(betterproto.Message):
    """
    Summary of gas charges.

     Storage is charged independently of computation.
     There are three parts to the storage charges:
     - `storage_cost`: the charge of storage at the time the transaction is executed.
                     The cost of storage is the number of bytes of the objects being mutated
                     multiplied by a variable storage cost per byte.
     - `storage_rebate`: the amount a user gets back when manipulating an object.
                       The `storage_rebate` is the `storage_cost` for an object minus fees.
     - `non_refundable_storage_fee`: not all the value of the object storage cost is
                                   given back to user and there is a small fraction that
                                   is kept by the system. This value tracks that charge.

     When looking at a gas cost summary the amount charged to the user is
     `computation_cost + storage_cost - storage_rebate`
     and that is the amount that is deducted from the gas coins.
     `non_refundable_storage_fee` is collected from the objects being mutated/deleted
     and it is tracked by the system in storage funds.

     Objects deleted, including the older versions of objects mutated, have the storage field
     on the objects added up to a pool of "potential rebate". This rebate then is reduced
     by the "nonrefundable rate" such that:
     `potential_rebate(storage cost of deleted/mutated objects) =
     storage_rebate + non_refundable_storage_fee`
    """

    computation_cost: "int | None" = betterproto.uint64_field(1, optional=True)
    """Cost of computation/execution."""

    storage_cost: "int | None" = betterproto.uint64_field(2, optional=True)
    """
    Storage cost, it's the sum of all storage cost for all objects created or mutated.
    """

    storage_rebate: "int | None" = betterproto.uint64_field(3, optional=True)
    """
    The amount of storage cost refunded to the user for all objects deleted or mutated in the
     transaction.
    """

    non_refundable_storage_fee: "int | None" = betterproto.uint64_field(
        4, optional=True
    )
    """
    The fee for the rebate. The portion of the storage rebate kept by the system.
    """


@dataclass(eq=False, repr=False)
class Identifier(betterproto.Message):
    """
    A Move identifier.

     Identifiers are only valid if they conform to the following ABNF:

     ```text
     identifier = (ALPHA *127(ALPHA / DIGIT / UNDERSCORE)) /
                  (UNDERSCORE 1*127(ALPHA / DIGIT / UNDERSCORE))
     UNDERSCORE = %x95
     ```
    """

    identifier: "str | None" = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class StructTag(betterproto.Message):
    """Type information for a Move struct."""

    address: "Address | None" = betterproto.message_field(1, optional=True)
    """Address of the package where this type was defined."""

    module: "Identifier | None" = betterproto.message_field(2, optional=True)
    """Name of the module where this type was defined."""

    name: "Identifier | None" = betterproto.message_field(3, optional=True)
    """Name of the type itself."""

    type_parameters: "list[TypeTag]" = betterproto.message_field(4)
    """List of type parameters, if any."""


@dataclass(eq=False, repr=False)
class TypeTag(betterproto.Message):
    """Type of a Move value."""

    u8: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        1, group="tag"
    )
    u16: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        2, group="tag"
    )
    u32: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        3, group="tag"
    )
    u64: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        4, group="tag"
    )
    u128: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        5, group="tag"
    )
    u256: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        6, group="tag"
    )
    bool: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        7, group="tag"
    )
    address: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        8, group="tag"
    )
    signer: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        9, group="tag"
    )
    vector: "TypeTag" = betterproto.message_field(10, group="tag")
    struct: "StructTag" = betterproto.message_field(11, group="tag")


@dataclass(eq=False, repr=False)
class MoveStructValue(betterproto.Message):
    struct_type: "StructTag | None" = betterproto.message_field(1, optional=True)
    fields: "list[MoveField]" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MoveField(betterproto.Message):
    name: "Identifier | None" = betterproto.message_field(1, optional=True)
    value: "MoveValue | None" = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class MoveVariant(betterproto.Message):
    enum_type: "StructTag | None" = betterproto.message_field(1, optional=True)
    variant_name: "Identifier | None" = betterproto.message_field(2, optional=True)
    tag: "int | None" = betterproto.uint32_field(3, optional=True)
    fields: "list[MoveField]" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MoveValue(betterproto.Message):
    bool: builtins.bool = betterproto.bool_field(2, group="kind")
    u8: int = betterproto.uint32_field(3, group="kind")
    u16: int = betterproto.uint32_field(4, group="kind")
    u32: int = betterproto.uint32_field(5, group="kind")
    u64: int = betterproto.uint64_field(6, group="kind")
    u128: "U128" = betterproto.message_field(7, group="kind")
    u256: "U256" = betterproto.message_field(8, group="kind")
    address: "Address" = betterproto.message_field(9, group="kind")
    vector: "MoveVector" = betterproto.message_field(10, group="kind")
    struct: "MoveStructValue" = betterproto.message_field(11, group="kind")
    signer: "Address" = betterproto.message_field(12, group="kind")
    variant: "MoveVariant" = betterproto.message_field(13, group="kind")


@dataclass(eq=False, repr=False)
class MoveVector(betterproto.Message):
    values: "list[MoveValue]" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Transaction(betterproto.Message):
    """A transaction."""

    v1: "TransactionTransactionV1" = betterproto.message_field(1, group="version")


@dataclass(eq=False, repr=False)
class TransactionTransactionV1(betterproto.Message):
    """Version 1 of `Transaction`."""

    kind: "TransactionKind | None" = betterproto.message_field(1, optional=True)
    sender: "Address | None" = betterproto.message_field(2, optional=True)
    gas_payment: "GasPayment | None" = betterproto.message_field(3, optional=True)
    expiration: "TransactionExpiration | None" = betterproto.message_field(
        4, optional=True
    )


@dataclass(eq=False, repr=False)
class GasPayment(betterproto.Message):
    """Payment information for executing a transaction."""

    objects: "list[ObjectReference]" = betterproto.message_field(1)
    """Set of gas objects to use for payment."""

    owner: "Address | None" = betterproto.message_field(2, optional=True)
    """
    Owner of the gas objects, either the transaction sender or a sponsor.
    """

    price: "int | None" = betterproto.uint64_field(3, optional=True)
    """
    Gas unit price to use when charging for computation.
    
     Must be greater than or equal to the network's current RGP (reference gas price).
    """

    budget: "int | None" = betterproto.uint64_field(4, optional=True)
    """Total budget willing to spend for the execution of a transaction."""


@dataclass(eq=False, repr=False)
class TransactionExpiration(betterproto.Message):
    """A TTL for a transaction."""

    none: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        1, group="expiration"
    )
    """The transaction has no expiration."""

    epoch: int = betterproto.uint64_field(2, group="expiration")
    """
    Validators won't sign and execute transaction unless the expiration epoch
     is greater than or equal to the current epoch.
    """


@dataclass(eq=False, repr=False)
class RandomnessStateUpdate(betterproto.Message):
    """Randomness update."""

    epoch: "int | None" = betterproto.uint64_field(1, optional=True)
    """Epoch of the randomness state update transaction."""

    randomness_round: "int | None" = betterproto.uint64_field(2, optional=True)
    """Randomness round of the update."""

    random_bytes: "bytes | None" = betterproto.bytes_field(3, optional=True)
    """Updated random bytes."""

    randomness_object_initial_shared_version: "int | None" = betterproto.uint64_field(
        4, optional=True
    )
    """The initial version of the randomness object that it was shared at."""


@dataclass(eq=False, repr=False)
class TransactionKind(betterproto.Message):
    """Transaction type."""

    programmable_transaction: "ProgrammableTransaction" = betterproto.message_field(
        1, group="kind"
    )
    """
    A user transaction comprised of a list of native commands and Move calls.
    """

    change_epoch: "ChangeEpoch" = betterproto.message_field(2, group="kind")
    """
    System transaction used to end an epoch.
    
     The `ChangeEpoch` variant is now deprecated (but the `ChangeEpoch` struct is still used by
     `EndOfEpochTransaction`).
    """

    genesis: "GenesisTransaction" = betterproto.message_field(200, group="kind")
    """
    Transaction used to initialize the chain state.
    
     Only valid if in the genesis checkpoint (0) and if this is the very first transaction ever
     executed on the chain.
    """

    consensus_commit_prologue_v1: "ConsensusCommitPrologue" = betterproto.message_field(
        201, group="kind"
    )
    """V1 consensus commit update."""

    authenticator_state_update: "AuthenticatorStateUpdate" = betterproto.message_field(
        3, group="kind"
    )
    """Update set of valid JWKs used for zklogin."""

    end_of_epoch: "EndOfEpochTransaction" = betterproto.message_field(4, group="kind")
    """
    Set of operations to run at the end of the epoch to close out the current epoch and start
     the next one.
    """

    randomness_state_update: "RandomnessStateUpdate" = betterproto.message_field(
        5, group="kind"
    )
    """Randomness update."""

    consensus_commit_prologue_v2: "ConsensusCommitPrologue" = betterproto.message_field(
        202, group="kind"
    )
    """V2 consensus commit update."""

    consensus_commit_prologue_v3: "ConsensusCommitPrologue" = betterproto.message_field(
        6, group="kind"
    )
    """V3 consensus commit update."""

    consensus_commit_prologue_v4: "ConsensusCommitPrologue" = betterproto.message_field(
        7, group="kind"
    )
    """V4 consensus commit update."""


@dataclass(eq=False, repr=False)
class ProgrammableTransaction(betterproto.Message):
    """
    A user transaction.

     Contains a series of native commands and Move calls where the results of one command can be
     used in future commands.
    """

    inputs: "list[Input]" = betterproto.message_field(1)
    """Input objects or primitive values."""

    commands: "list[Command]" = betterproto.message_field(2)
    """
    The commands to be executed sequentially. A failure in any command
     results in the failure of the entire transaction.
    """


@dataclass(eq=False, repr=False)
class Input(betterproto.Message):
    """An input to a user transaction."""

    pure: bytes = betterproto.bytes_field(1, group="kind")
    """
    A move value serialized as BCS.
    
     For normal operations this is required to be a move primitive type and not contain structs
     or objects.
    """

    immutable_or_owned: "ObjectReference" = betterproto.message_field(2, group="kind")
    """A Move object that is either immutable or address owned."""

    shared: "SharedObjectInput" = betterproto.message_field(3, group="kind")
    """A Move object whose owner is "Shared"."""

    receiving: "ObjectReference" = betterproto.message_field(4, group="kind")
    """A Move object that is attempted to be received in this transaction."""


@dataclass(eq=False, repr=False)
class SharedObjectInput(betterproto.Message):
    """A shared object input."""

    object_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """`ObjectId` of the shared object."""

    initial_shared_version: "int | None" = betterproto.uint64_field(2, optional=True)
    """Initial version of the object when it was shared."""

    mutable: "bool | None" = betterproto.bool_field(3, optional=True)
    """
    Controls whether the caller asks for a mutable reference to the shared object.
    """


@dataclass(eq=False, repr=False)
class Command(betterproto.Message):
    """A single command in a programmable transaction."""

    move_call: "MoveCall" = betterproto.message_field(1, group="command")
    """A call to either an entry or a public Move function."""

    transfer_objects: "TransferObjects" = betterproto.message_field(2, group="command")
    """
    `(Vec<forall T:key+store. T>, address)`
     It sends n-objects to the specified address. These objects must have store
     (public transfer) and either the previous owner must be an address or the object must
     be newly created.
    """

    split_coins: "SplitCoins" = betterproto.message_field(3, group="command")
    """
    `(&mut Coin<T>, Vec<u64>)` -> `Vec<Coin<T>>`
     It splits off some amounts into new coins with those amounts.
    """

    merge_coins: "MergeCoins" = betterproto.message_field(4, group="command")
    """
    `(&mut Coin<T>, Vec<Coin<T>>)`
     It merges n-coins into the first coin.
    """

    publish: "Publish" = betterproto.message_field(5, group="command")
    """
    Publishes a Move package. It takes the package bytes and a list of the package's transitive
     dependencies to link against on chain.
    """

    make_move_vector: "MakeMoveVector" = betterproto.message_field(6, group="command")
    """
    `forall T: Vec<T> -> vector<T>`
     Given n-values of the same type, it constructs a vector. For non-objects or an empty vector,
     the type tag must be specified.
    """

    upgrade: "Upgrade" = betterproto.message_field(7, group="command")
    """
    Upgrades a Move package.
     Takes (in order):
     1. A vector of serialized modules for the package.
     2. A vector of object ids for the transitive dependencies of the new package.
     3. The object ID of the package being upgraded.
     4. An argument holding the `UpgradeTicket` that must have been produced from an earlier command in the same
        programmable transaction.
    """


@dataclass(eq=False, repr=False)
class MoveCall(betterproto.Message):
    """
    Command to call a Move function.

     Functions that can be called by a `MoveCall` command are those that have a function signature
     that is either `entry` or `public` (which don't have a reference return type).
    """

    package: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """The package containing the module and function."""

    module: "Identifier | None" = betterproto.message_field(2, optional=True)
    """The specific module in the package containing the function."""

    function: "Identifier | None" = betterproto.message_field(3, optional=True)
    """The function to be called."""

    type_arguments: "list[TypeTag]" = betterproto.message_field(4)
    """The type arguments to the function."""

    arguments: "list[Argument]" = betterproto.message_field(5)
    """The arguments to the function."""


@dataclass(eq=False, repr=False)
class TransferObjects(betterproto.Message):
    """Command to transfer ownership of a set of objects to an address."""

    objects: "list[Argument]" = betterproto.message_field(1)
    """Set of objects to transfer."""

    address: "Argument | None" = betterproto.message_field(2, optional=True)
    """The address to transfer ownership to."""


@dataclass(eq=False, repr=False)
class SplitCoins(betterproto.Message):
    """Command to split a single coin object into multiple coins."""

    coin: "Argument | None" = betterproto.message_field(1, optional=True)
    """The coin to split."""

    amounts: "list[Argument]" = betterproto.message_field(2)
    """The amounts to split off."""


@dataclass(eq=False, repr=False)
class MergeCoins(betterproto.Message):
    """Command to merge multiple coins of the same type into a single coin."""

    coin: "Argument | None" = betterproto.message_field(1, optional=True)
    """Coin to merge coins into."""

    coins_to_merge: "list[Argument]" = betterproto.message_field(2)
    """
    Set of coins to merge into `coin`.
    
     All listed coins must be of the same type and be the same type as `coin`
    """


@dataclass(eq=False, repr=False)
class Publish(betterproto.Message):
    """Command to publish a new Move package."""

    modules: "list[bytes]" = betterproto.bytes_field(1)
    """The serialized Move modules."""

    dependencies: "list[ObjectId]" = betterproto.message_field(2)
    """Set of packages that the to-be published package depends on."""


@dataclass(eq=False, repr=False)
class MakeMoveVector(betterproto.Message):
    """Command to build a Move vector out of a set of individual elements."""

    element_type: "TypeTag | None" = betterproto.message_field(1, optional=True)
    """
    Type of the individual elements.
    
     This is required to be set when the type can't be inferred, for example when the set of
     provided arguments are all pure input values.
    """

    elements: "list[Argument]" = betterproto.message_field(2)
    """The set individual elements to build the vector with."""


@dataclass(eq=False, repr=False)
class Upgrade(betterproto.Message):
    """Command to upgrade an already published package."""

    modules: "list[bytes]" = betterproto.bytes_field(1)
    """The serialized Move modules."""

    dependencies: "list[ObjectId]" = betterproto.message_field(2)
    """Set of packages that the to-be published package depends on."""

    package: "ObjectId | None" = betterproto.message_field(3, optional=True)
    """Package ID of the package to upgrade."""

    ticket: "Argument | None" = betterproto.message_field(4, optional=True)
    """Ticket authorizing the upgrade."""


@dataclass(eq=False, repr=False)
class Argument(betterproto.Message):
    """An argument to a programmable transaction command."""

    gas: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        1, group="kind"
    )
    """
    The gas coin. The gas coin can only be used by-ref, except for with
     `TransferObjects`, which can use it by-value.
    """

    input: int = betterproto.uint32_field(2, group="kind")
    """
    One of the input objects or primitive values (from
     `ProgrammableTransaction` inputs).
    """

    result: int = betterproto.uint32_field(3, group="kind")
    """
    The result of another command (from `ProgrammableTransaction` commands).
    """

    nested_result: "NestedResult" = betterproto.message_field(4, group="kind")
    """
    Like a `Result` but it accesses a nested result. Currently, the only usage
     of this is to access a value from a Move call with multiple return values.
    """


@dataclass(eq=False, repr=False)
class NestedResult(betterproto.Message):
    """An argument type for a nested result."""

    result: "int | None" = betterproto.uint32_field(1, optional=True)
    """The command index."""

    subresult: "int | None" = betterproto.uint32_field(2, optional=True)
    """The index into the command's output."""


@dataclass(eq=False, repr=False)
class ChangeEpoch(betterproto.Message):
    """System transaction used to change the epoch."""

    epoch: "int | None" = betterproto.uint64_field(1, optional=True)
    """The next (to become) epoch ID."""

    protocol_version: "int | None" = betterproto.uint64_field(2, optional=True)
    """The protocol version in effect in the new epoch."""

    storage_charge: "int | None" = betterproto.uint64_field(3, optional=True)
    """The total amount of gas charged for storage during the epoch."""

    computation_charge: "int | None" = betterproto.uint64_field(4, optional=True)
    """The total amount of gas charged for computation during the epoch."""

    storage_rebate: "int | None" = betterproto.uint64_field(5, optional=True)
    """The amount of storage rebate refunded to the txn senders."""

    non_refundable_storage_fee: "int | None" = betterproto.uint64_field(
        6, optional=True
    )
    """The non-refundable storage fee."""

    epoch_start_timestamp_ms: "int | None" = betterproto.uint64_field(7, optional=True)
    """Unix timestamp when epoch started."""

    system_packages: "list[SystemPackage]" = betterproto.message_field(8)
    """
    System packages (specifically framework and Move stdlib) that are written before the new
     epoch starts. This tracks framework upgrades on chain. When executing the `ChangeEpoch` txn,
     the validator must write out the following modules.  Modules are provided with the version they
     will be upgraded to, their modules in serialized form (which include their package ID), and
     a list of their transitive dependencies.
    """


@dataclass(eq=False, repr=False)
class SystemPackage(betterproto.Message):
    """System package."""

    version: "int | None" = betterproto.uint64_field(1, optional=True)
    """Version of the package."""

    modules: "list[bytes]" = betterproto.bytes_field(2)
    """Move modules."""

    dependencies: "list[ObjectId]" = betterproto.message_field(3)
    """Package dependencies."""


@dataclass(eq=False, repr=False)
class GenesisTransaction(betterproto.Message):
    """The genesis transaction."""

    objects: "list[GenesisObject]" = betterproto.message_field(1)
    """Set of genesis objects."""


@dataclass(eq=False, repr=False)
class ConsensusCommitPrologue(betterproto.Message):
    """
    Consensus commit prologue system transaction.

     This message can represent V1, V2, and V3 prologue types.
    """

    epoch: "int | None" = betterproto.uint64_field(1, optional=True)
    """
    Epoch of the commit prologue transaction.
    
     Present in V1, V2, V3, V4.
    """

    round: "int | None" = betterproto.uint64_field(2, optional=True)
    """
    Consensus round of the commit.
    
     Present in V1, V2, V3, V4.
    """

    commit_timestamp_ms: "int | None" = betterproto.uint64_field(3, optional=True)
    """
    Unix timestamp from consensus.
    
     Present in V1, V2, V3, V4.
    """

    consensus_commit_digest: "Digest | None" = betterproto.message_field(
        4, optional=True
    )
    """
    Digest of consensus output.
    
     Present in V2, V3, V4.
    """

    sub_dag_index: "int | None" = betterproto.uint64_field(5, optional=True)
    """
    The sub DAG index of the consensus commit. This field is populated if there
     are multiple consensus commits per round.
    
     Present in V3, V4.
    """

    consensus_determined_version_assignments: (
        "ConsensusDeterminedVersionAssignments | None"
    ) = betterproto.message_field(6, optional=True)
    """
    Stores consensus handler determined shared object version assignments.
    
     Present in V3, V4.
    """

    additional_state_digest: "Digest | None" = betterproto.message_field(
        7, optional=True
    )
    """
    Digest of any additional state computed by the consensus handler.
     Used to detect forking bugs as early as possible.
    
     Present in V4.
    """


@dataclass(eq=False, repr=False)
class VersionAssignment(betterproto.Message):
    """Object version assignment from consensus."""

    object_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """`ObjectId` of the object."""

    version: "int | None" = betterproto.uint64_field(2, optional=True)
    """Assigned version."""


@dataclass(eq=False, repr=False)
class CancelledTransaction(betterproto.Message):
    """A transaction that was cancelled."""

    digest: "Digest | None" = betterproto.message_field(1, optional=True)
    """Digest of the cancelled transaction."""

    version_assignments: "list[VersionAssignment]" = betterproto.message_field(2)
    """List of object version assignments."""


@dataclass(eq=False, repr=False)
class CancelledTransactions(betterproto.Message):
    """Set of cancelled transactions."""

    cancelled_transactions: "list[CancelledTransaction]" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ConsensusDeterminedVersionAssignments(betterproto.Message):
    """Version assignments performed by consensus."""

    cancelled_transactions: "CancelledTransactions" = betterproto.message_field(
        1, group="kind"
    )
    """Cancelled transaction version assignment."""


@dataclass(eq=False, repr=False)
class AuthenticatorStateUpdate(betterproto.Message):
    """Update the set of valid JWKs."""

    epoch: "int | None" = betterproto.uint64_field(1, optional=True)
    """Epoch of the authenticator state update transaction."""

    round: "int | None" = betterproto.uint64_field(2, optional=True)
    """Consensus round of the authenticator state update."""

    new_active_jwks: "list[ActiveJwk]" = betterproto.message_field(3)
    """Newly active JWKs."""

    authenticator_object_initial_shared_version: "int | None" = (
        betterproto.uint64_field(4, optional=True)
    )
    """
    The initial version of the authenticator object that it was shared at.
    """


@dataclass(eq=False, repr=False)
class ActiveJwk(betterproto.Message):
    """A new JWK."""

    id: "JwkId | None" = betterproto.message_field(1, optional=True)
    """Identifier used to uniquely identify a JWK."""

    jwk: "Jwk | None" = betterproto.message_field(2, optional=True)
    """The JWK."""

    epoch: "int | None" = betterproto.uint64_field(3, optional=True)
    """Most recent epoch in which the JWK was validated."""


@dataclass(eq=False, repr=False)
class JwkId(betterproto.Message):
    """Key to uniquely identify a JWK."""

    iss: "str | None" = betterproto.string_field(1, optional=True)
    """The issuer or identity of the OIDC provider."""

    kid: "str | None" = betterproto.string_field(2, optional=True)
    """A key ID used to uniquely identify a key from an OIDC provider."""


@dataclass(eq=False, repr=False)
class Jwk(betterproto.Message):
    """
    A JSON web key.

     Struct that contains info for a JWK. A list of them for different kinds can
     be retrieved from the JWK endpoint (for example, <https://www.googleapis.com/oauth2/v3/certs>).
     The JWK is used to verify the JWT token.
    """

    kty: "str | None" = betterproto.string_field(1, optional=True)
    """
    Key type parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.1.
    """

    e: "str | None" = betterproto.string_field(2, optional=True)
    """
    RSA public exponent, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3.
    """

    n: "str | None" = betterproto.string_field(3, optional=True)
    """
    RSA modulus, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3.
    """

    alg: "str | None" = betterproto.string_field(4, optional=True)
    """
    Algorithm parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.4.
    """


@dataclass(eq=False, repr=False)
class EndOfEpochTransaction(betterproto.Message):
    """
    Set of operations run at the end of the epoch to close out the current epoch
     and start the next one.
    """

    transactions: "list[EndOfEpochTransactionKind]" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EndOfEpochTransactionKind(betterproto.Message):
    """Operation run at the end of an epoch."""

    change_epoch: "ChangeEpoch" = betterproto.message_field(1, group="kind")
    """End the epoch and start the next one."""

    authenticator_state_expire: "AuthenticatorStateExpire" = betterproto.message_field(
        2, group="kind"
    )
    """Expire JWKs used for zklogin."""

    authenticator_state_create: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(200, group="kind")
    )
    """Create and initialize the authenticator object used for zklogin."""

    randomness_state_create: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(201, group="kind")
    )
    """Create and initialize the randomness object."""

    deny_list_state_create: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(202, group="kind")
    )
    """Create and initialize the deny list object."""

    bridge_state_create: "Digest" = betterproto.message_field(203, group="kind")
    """Create and initialize the bridge object."""

    bridge_committee_init: int = betterproto.uint64_field(204, group="kind")
    """Initialize the bridge committee."""


@dataclass(eq=False, repr=False)
class AuthenticatorStateExpire(betterproto.Message):
    """Expire old JWKs."""

    min_epoch: "int | None" = betterproto.uint64_field(1, optional=True)
    """Expire JWKs that have a lower epoch than this."""

    authenticator_object_initial_shared_version: "int | None" = (
        betterproto.uint64_field(2, optional=True)
    )
    """
    The initial version of the authenticator object that it was shared at.
    """


@dataclass(eq=False, repr=False)
class TransactionEffects(betterproto.Message):
    """The output or effects of executing a transaction."""

    v1: "TransactionEffectsV1" = betterproto.message_field(1, group="version")
    v2: "TransactionEffectsV2" = betterproto.message_field(2, group="version")


@dataclass(eq=False, repr=False)
class TransactionEffectsV1(betterproto.Message):
    """Version 1 of `TransactionEffects`."""

    status: "ExecutionStatus | None" = betterproto.message_field(1, optional=True)
    """The status of the execution."""

    epoch: "int | None" = betterproto.uint64_field(2, optional=True)
    """The epoch when this transaction was executed."""

    gas_used: "GasCostSummary | None" = betterproto.message_field(3, optional=True)
    """The gas used by this transaction."""

    modified_at_versions: "list[ModifiedAtVersion]" = betterproto.message_field(4)
    """
    The version that every modified (mutated or deleted) object had before it was modified by
     this transaction.
    """

    shared_objects: "list[ObjectReference]" = betterproto.message_field(5)
    """
    The object references of the shared objects used in this transaction. Empty if no shared objects were used.
    """

    transaction_digest: "Digest | None" = betterproto.message_field(6, optional=True)
    """The transaction digest."""

    created: "list[ObjectReferenceWithOwner]" = betterproto.message_field(7)
    """`ObjectReference` and owner of new objects created."""

    mutated: "list[ObjectReferenceWithOwner]" = betterproto.message_field(8)
    """
    `ObjectReference` and owner of mutated objects, including gas object.
    """

    unwrapped: "list[ObjectReferenceWithOwner]" = betterproto.message_field(9)
    """
    `ObjectReference` and owner of objects that are unwrapped in this transaction.
     Unwrapped objects are objects that were wrapped into other objects in the past,
     and just got extracted out.
    """

    deleted: "list[ObjectReference]" = betterproto.message_field(10)
    """Object refs of objects now deleted (the new refs)."""

    unwrapped_then_deleted: "list[ObjectReference]" = betterproto.message_field(11)
    """
    Object refs of objects previously wrapped in other objects but now deleted.
    """

    wrapped: "list[ObjectReference]" = betterproto.message_field(12)
    """Object refs of objects now wrapped in other objects."""

    gas_object: "ObjectReferenceWithOwner | None" = betterproto.message_field(
        13, optional=True
    )
    """
    The updated gas object reference. Have a dedicated field for convenient access.
     It's also included in mutated.
    """

    events_digest: "Digest | None" = betterproto.message_field(14, optional=True)
    """
    The digest of the events emitted during execution,
     can be `None` if the transaction does not emit any event.
    """

    dependencies: "list[Digest]" = betterproto.message_field(15)
    """The set of transaction digests this transaction depends on."""


@dataclass(eq=False, repr=False)
class ObjectReferenceWithOwner(betterproto.Message):
    """An object reference with owner information."""

    reference: "ObjectReference | None" = betterproto.message_field(1, optional=True)
    """`ObjectReference`."""

    owner: "Owner | None" = betterproto.message_field(2, optional=True)
    """`Owner`."""


@dataclass(eq=False, repr=False)
class ModifiedAtVersion(betterproto.Message):
    """Indicates that an object was modified at a specific version."""

    object_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """`ObjectId` of the object."""

    version: "int | None" = betterproto.uint64_field(2, optional=True)
    """Version of the object prior to this transaction."""


@dataclass(eq=False, repr=False)
class TransactionEffectsV2(betterproto.Message):
    """Version 2 of `TransactionEffects`."""

    status: "ExecutionStatus | None" = betterproto.message_field(1, optional=True)
    """The status of the execution."""

    epoch: "int | None" = betterproto.uint64_field(2, optional=True)
    """The epoch when this transaction was executed."""

    gas_used: "GasCostSummary | None" = betterproto.message_field(3, optional=True)
    """The gas used by this transaction."""

    transaction_digest: "Digest | None" = betterproto.message_field(4, optional=True)
    """The transaction digest."""

    gas_object_index: "int | None" = betterproto.uint32_field(5, optional=True)
    """
    The updated gas object reference, as an index into the `changed_objects` vector.
     Having a dedicated field for convenient access.
     System transaction that don't require gas will leave this as `None`.
    """

    events_digest: "Digest | None" = betterproto.message_field(6, optional=True)
    """
    The digest of the events emitted during execution,
     can be `None` if the transaction does not emit any event.
    """

    dependencies: "list[Digest]" = betterproto.message_field(7)
    """The set of transaction digests this transaction depends on."""

    lamport_version: "int | None" = betterproto.uint64_field(8, optional=True)
    """
    The version number of all the written Move objects by this transaction.
    """

    changed_objects: "list[ChangedObject]" = betterproto.message_field(9)
    """Objects whose state are changed in the object store."""

    unchanged_shared_objects: "list[UnchangedSharedObject]" = betterproto.message_field(
        10
    )
    """
    Shared objects that are not mutated in this transaction. Unlike owned objects,
     read-only shared objects' version are not committed in the transaction,
     and in order for a node to catch up and execute it without consensus sequencing,
     the version needs to be committed in the effects.
    """

    auxiliary_data_digest: "Digest | None" = betterproto.message_field(
        11, optional=True
    )
    """
    Auxiliary data that are not protocol-critical, generated as part of the effects but are stored separately.
     Storing it separately allows us to avoid bloating the effects with data that are not critical.
     It also provides more flexibility on the format and type of the data.
    """


@dataclass(eq=False, repr=False)
class ChangedObject(betterproto.Message):
    """/ Input/output state of an object that was changed during execution."""

    object_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """ID of the object."""

    not_exist: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        2, group="input_state"
    )
    """Object did not exist prior to this transaction."""

    exist: "ObjectExist" = betterproto.message_field(3, group="input_state")
    """Object existed prior to this transaction."""

    removed: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        4, group="output_state"
    )
    """Object was removed from the store due to this transaction."""

    object_write: "ObjectWrite" = betterproto.message_field(5, group="output_state")
    """Object was written, including all of mutated, created, unwrapped."""

    package_write: "PackageWrite" = betterproto.message_field(6, group="output_state")
    """Package was written."""

    none: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        7, group="id_operation"
    )
    created: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        8, group="id_operation"
    )
    deleted: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        9, group="id_operation"
    )


@dataclass(eq=False, repr=False)
class ObjectExist(betterproto.Message):
    """Information about the old version of the object."""

    version: "int | None" = betterproto.uint64_field(1, optional=True)
    """Version of the object."""

    digest: "Digest | None" = betterproto.message_field(2, optional=True)
    """Digest of the object."""

    owner: "Owner | None" = betterproto.message_field(3, optional=True)
    """Owner of the object."""


@dataclass(eq=False, repr=False)
class ObjectWrite(betterproto.Message):
    """Object write, including all of mutated, created, unwrapped."""

    digest: "Digest | None" = betterproto.message_field(2, optional=True)
    """Digest of the new version of the object."""

    owner: "Owner | None" = betterproto.message_field(3, optional=True)
    """Owner of the new version of the object."""


@dataclass(eq=False, repr=False)
class PackageWrite(betterproto.Message):
    """Package write."""

    version: "int | None" = betterproto.uint64_field(1, optional=True)
    """Version of the new package."""

    digest: "Digest | None" = betterproto.message_field(2, optional=True)
    """Digest of the new package."""


@dataclass(eq=False, repr=False)
class UnchangedSharedObject(betterproto.Message):
    """A shared object that wasn't changed during execution."""

    object_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """ObjectId of the shared object."""

    read_only_root: "ReadOnlyRoot" = betterproto.message_field(2, group="kind")
    """Read-only shared object from the input."""

    mutate_deleted: int = betterproto.uint64_field(3, group="kind")
    """Deleted shared objects that appear mutably/owned in the input."""

    read_deleted: int = betterproto.uint64_field(4, group="kind")
    """Deleted shared objects that appear as read-only in the input."""

    cancelled: int = betterproto.uint64_field(5, group="kind")
    """
    Shared objects that was congested and resulted in this transaction being
     cancelled.
    """

    per_epoch_config: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(6, group="kind")
    )
    """
    Read of a per-epoch config object that should remain the same during an epoch.
    """


@dataclass(eq=False, repr=False)
class ReadOnlyRoot(betterproto.Message):
    """Read-only shared object from the input."""

    version: "int | None" = betterproto.uint64_field(1, optional=True)
    """Version of the shared object."""

    digest: "Digest | None" = betterproto.message_field(2, optional=True)
    """Digest of the shared object."""


@dataclass(eq=False, repr=False)
class ExecutionStatus(betterproto.Message):
    """/ The status of an executed transaction."""

    success: "bool | None" = betterproto.bool_field(1, optional=True)
    """Indicates if the transaction was successful or not."""

    status: "FailureStatus | None" = betterproto.message_field(2, optional=True)
    """The error if `success` is false."""


@dataclass(eq=False, repr=False)
class SizeError(betterproto.Message):
    """A size error."""

    size: "int | None" = betterproto.uint64_field(1, optional=True)
    """The offending size."""

    max_size: "int | None" = betterproto.uint64_field(2, optional=True)
    """The maximum allowable size."""


@dataclass(eq=False, repr=False)
class MoveError(betterproto.Message):
    """Error that occurred in Move."""

    location: "MoveLocation | None" = betterproto.message_field(1, optional=True)
    """Location in Move where the error occurred."""

    abort_code: "int | None" = betterproto.uint64_field(2, optional=True)
    """Abort code from Move."""


@dataclass(eq=False, repr=False)
class FailureStatus(betterproto.Message):
    """An error that can occur during the execution of a transaction."""

    command: "int | None" = betterproto.uint64_field(1, optional=True)
    """The command, if any, during which the error occurred."""

    insufficient_gas: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(2, group="execution_error")
    )
    """Insufficient gas."""

    invalid_gas_object: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(3, group="execution_error")
    )
    """Invalid `Gas` object."""

    invariant_violation: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(4, group="execution_error")
    )
    """Invariant violation."""

    feature_not_yet_supported: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(5, group="execution_error")
    )
    """Attempted to use feature that is not supported yet."""

    object_too_big: "SizeError" = betterproto.message_field(6, group="execution_error")
    """Move object is larger than the maximum allowed size."""

    package_too_big: "SizeError" = betterproto.message_field(7, group="execution_error")
    """Package is larger than the maximum allowed size."""

    circular_object_ownership: "ObjectId" = betterproto.message_field(
        8, group="execution_error"
    )
    """Circular object ownership."""

    insufficient_coin_balance: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(9, group="execution_error")
    )
    """
    Coin errors.
    
     Insufficient coin balance for requested operation.
    """

    coin_balance_overflow: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(10, group="execution_error")
    )
    """Coin balance overflowed an u64."""

    publish_error_non_zero_address: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(11, group="execution_error")
    )
    """
    Publish/Upgrade errors.
    
     Publish error, non-zero address.
     The modules in the package must have their self-addresses set to zero.
    """

    sui_move_verification_error: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(12, group="execution_error")
    )
    """Sui Move bytecode verification error."""

    move_primitive_runtime_error: "MoveError" = betterproto.message_field(
        13, group="execution_error"
    )
    """
    MoveVm errors.
    
     Error from a non-abort instruction.
     Possible causes:
         Arithmetic error, stack overflow, max value depth, or similar.
    """

    move_abort: "MoveError" = betterproto.message_field(14, group="execution_error")
    """Move runtime abort."""

    vm_verification_or_deserialization_error: (
        "betterproto_lib_google_protobuf.Empty"
    ) = betterproto.message_field(15, group="execution_error")
    """Bytecode verification error."""

    vm_invariant_violation: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(16, group="execution_error")
    )
    """MoveVm invariant violation."""

    function_not_found: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(17, group="execution_error")
    )
    """
    Programmable transaction errors.
    
     Function not found.
    """

    arity_mismatch: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        18, group="execution_error"
    )
    """
    Parity mismatch for Move function.
     The number of arguments does not match the number of parameters.
    """

    type_arity_mismatch: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(19, group="execution_error")
    )
    """
    Type parity mismatch for Move function.
     Mismatch between the number of actual versus expected type arguments.
    """

    non_entry_function_invoked: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(20, group="execution_error")
    )
    """
    Non-entry function invoked. Move Call must start with an entry function.
    """

    command_argument_error: "CommandArgumentError" = betterproto.message_field(
        21, group="execution_error"
    )
    """Invalid command argument."""

    type_argument_error: "TypeArgumentError" = betterproto.message_field(
        22, group="execution_error"
    )
    """Type argument error."""

    unused_value_without_drop: "NestedResult" = betterproto.message_field(
        23, group="execution_error"
    )
    """Unused result without the drop ability."""

    invalid_public_function_return_type: int = betterproto.uint32_field(
        24, group="execution_error"
    )
    """
    Invalid public Move function signature.
     Unsupported return type for return value.
    """

    invalid_transfer_object: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(25, group="execution_error")
    )
    """Invalid transfer object, object does not have public transfer."""

    effects_too_large: "SizeError" = betterproto.message_field(
        26, group="execution_error"
    )
    """
    Post-execution errors.
    
     Effects from the transaction are too large.
    """

    publish_upgrade_missing_dependency: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(27, group="execution_error")
    )
    """Publish or Upgrade is missing dependency."""

    publish_upgrade_dependency_downgrade: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(28, group="execution_error")
    )
    """
    Publish or upgrade dependency downgrade.
    
     Indirect (transitive) dependency of published or upgraded package has been assigned an
     on-chain version that is less than the version required by one of the package's
     transitive dependencies.
    """

    package_upgrade_error: "PackageUpgradeError" = betterproto.message_field(
        29, group="execution_error"
    )
    """Invalid package upgrade."""

    written_objects_too_large: "SizeError" = betterproto.message_field(
        30, group="execution_error"
    )
    """
    Indicates the transaction tried to write objects too large to storage.
    """

    certificate_denied: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(31, group="execution_error")
    )
    """Certificate is on the deny list."""

    sui_move_verification_timedout: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(32, group="execution_error")
    )
    """Sui Move bytecode verification timed out."""

    shared_object_operation_not_allowed: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(33, group="execution_error")
    )
    """The requested shared object operation is not allowed."""

    input_object_deleted: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(34, group="execution_error")
    )
    """Requested shared object has been deleted."""

    execution_cancelled_due_to_shared_object_congestion: "CongestedObjectsError" = (
        betterproto.message_field(35, group="execution_error")
    )
    """Certificate is cancelled due to congestion on shared objects."""

    address_denied_for_coin: "AddressDeniedForCoinError" = betterproto.message_field(
        36, group="execution_error"
    )
    """Address is denied for this coin type."""

    coin_type_global_pause: str = betterproto.string_field(37, group="execution_error")
    """Coin type is globally paused for use."""

    execution_cancelled_due_to_randomness_unavailable: (
        "betterproto_lib_google_protobuf.Empty"
    ) = betterproto.message_field(38, group="execution_error")
    """
    Certificate is cancelled because randomness could not be generated this epoch.
    """


@dataclass(eq=False, repr=False)
class AddressDeniedForCoinError(betterproto.Message):
    """Address is denied for this coin type."""

    address: "Address | None" = betterproto.message_field(1, optional=True)
    """Denied address."""

    coin_type: "str | None" = betterproto.string_field(2, optional=True)
    """Coin type."""


@dataclass(eq=False, repr=False)
class CongestedObjectsError(betterproto.Message):
    """
    Set of objects that were congested, leading to the transaction's cancellation.
    """

    congested_objects: "list[ObjectId]" = betterproto.message_field(1)
    """Set of congested objects."""


@dataclass(eq=False, repr=False)
class MoveLocation(betterproto.Message):
    """/ Location in Move bytecode where an error occurred.s"""

    package: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """The package ID."""

    module: "Identifier | None" = betterproto.message_field(2, optional=True)
    """The module name."""

    function: "int | None" = betterproto.uint32_field(3, optional=True)
    """The function index."""

    instruction: "int | None" = betterproto.uint32_field(4, optional=True)
    """Offset of the instruction where the error occurred."""

    function_name: "Identifier | None" = betterproto.message_field(5, optional=True)
    """The name of the function, if available."""


@dataclass(eq=False, repr=False)
class CommandArgumentError(betterproto.Message):
    """An error with an argument to a command."""

    argument: "int | None" = betterproto.uint32_field(1, optional=True)
    """Position of the problematic argument."""

    type_mismatch: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        2, group="kind"
    )
    """The type of the value does not match the expected type."""

    invalid_bcs_bytes: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(3, group="kind")
    )
    """
    The argument cannot be deserialized into a value of the specified type.
    """

    invalid_usage_of_pure_argument: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(4, group="kind")
    )
    """The argument cannot be instantiated from raw bytes."""

    invalid_argument_to_private_entry_function: (
        "betterproto_lib_google_protobuf.Empty"
    ) = betterproto.message_field(5, group="kind")
    """
    Invalid argument to private entry function.
     Private entry functions cannot take arguments from other Move functions.
    """

    index_out_of_bounds: int = betterproto.uint32_field(6, group="kind")
    """Out of bounds access to input or results."""

    secondary_index_out_of_bounds: "NestedResult" = betterproto.message_field(
        7, group="kind"
    )
    """Out of bounds access to subresult."""

    invalid_result_arity: int = betterproto.uint32_field(8, group="kind")
    """
    Invalid usage of result.
     Expected a single result but found either no return value or multiple.
    """

    invalid_gas_coin_usage: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(9, group="kind")
    )
    """
    Invalid usage of gas coin.
     The gas coin can only be used by-value with a `TransferObject` command.
    """

    invalid_value_usage: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(10, group="kind")
    )
    """
    Invalid usage of Move value.
        - Mutably borrowed values require unique usage.
        - Immutably borrowed values cannot be taken or borrowed mutably.
        - Taken values cannot be used again.
    """

    invalid_object_by_value: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(11, group="kind")
    )
    """Immutable objects cannot be passed by-value."""

    invalid_object_by_mut_ref: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(12, group="kind")
    )
    """Immutable objects cannot be passed by mutable reference, `&mut`."""

    shared_object_operation_not_allowed: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(13, group="kind")
    )
    """
    Shared object operations such as wrapping, freezing, or converting to owned are not
     allowed.
    """


@dataclass(eq=False, repr=False)
class PackageUpgradeError(betterproto.Message):
    """An error with a upgrading a package."""

    unable_to_fetch_package: "ObjectId" = betterproto.message_field(2, group="kind")
    """Unable to fetch package."""

    not_a_package: "ObjectId" = betterproto.message_field(3, group="kind")
    """Object is not a package."""

    incompatible_upgrade: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(4, group="kind")
    )
    """Package upgrade is incompatible with previous version."""

    digets_does_not_match: "Digest" = betterproto.message_field(5, group="kind")
    """Digest in upgrade ticket and computed digest differ."""

    unknown_upgrade_policy: int = betterproto.uint32_field(6, group="kind")
    """Upgrade policy is not valid."""

    package_id_does_not_match: "PackageIdDoesNotMatch" = betterproto.message_field(
        7, group="kind"
    )
    """Package ID does not match `PackageId` in upgrade ticket."""


@dataclass(eq=False, repr=False)
class PackageIdDoesNotMatch(betterproto.Message):
    """Package ID does not match `PackageId` in upgrade ticket."""

    package_id: "ObjectId | None" = betterproto.message_field(1, optional=True)
    """The package ID."""

    ticket_id: "ObjectId | None" = betterproto.message_field(2, optional=True)
    """The ticket ID."""


@dataclass(eq=False, repr=False)
class TypeArgumentError(betterproto.Message):
    """Type argument error."""

    type_argument: "int | None" = betterproto.uint32_field(1, optional=True)
    """Index of the problematic type argument."""

    type_not_found: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        2, group="kind"
    )
    """A type was not found in the module specified."""

    constraint_not_satisfied: "betterproto_lib_google_protobuf.Empty" = (
        betterproto.message_field(3, group="kind")
    )
    """A type provided did not match the specified constraint."""


@dataclass(eq=False, repr=False)
class UserSignature(betterproto.Message):
    """A signature from a user."""

    simple: "SimpleSignature" = betterproto.message_field(1, group="signature")
    multisig: "MultisigAggregatedSignature" = betterproto.message_field(
        2, group="signature"
    )
    zklogin: "ZkLoginAuthenticator" = betterproto.message_field(3, group="signature")
    passkey: "PasskeyAuthenticator" = betterproto.message_field(4, group="signature")


@dataclass(eq=False, repr=False)
class SimpleSignature(betterproto.Message):
    """
    A basic signature.

     Can either be an ed25519, secp256k1, or secp256r1 signature with
     corresponding public key.
    """

    scheme: "int | None" = betterproto.int32_field(1, optional=True)
    """
    The signature scheme of the signautre and public key, which should be an
     enum value of [sui.types.SignatureScheme][sui.types.SignatureScheme]
    """

    signature: "bytes | None" = betterproto.bytes_field(2, optional=True)
    """Signature bytes."""

    public_key: "bytes | None" = betterproto.bytes_field(3, optional=True)
    """Public key bytes."""


@dataclass(eq=False, repr=False)
class ZkLoginPublicIdentifier(betterproto.Message):
    """Public key equivalent for zklogin authenticators."""

    iss: "str | None" = betterproto.string_field(1, optional=True)
    address_seed: "Bn254FieldElement | None" = betterproto.message_field(
        2, optional=True
    )


@dataclass(eq=False, repr=False)
class MultisigMemberPublicKey(betterproto.Message):
    """Set of valid public keys for multisig committee members."""

    ed25519: bytes = betterproto.bytes_field(1, group="scheme")
    """An ed25519 public key"""

    secp256_k1: bytes = betterproto.bytes_field(2, group="scheme")
    """A secp256k1 public key"""

    secp256_r1: bytes = betterproto.bytes_field(3, group="scheme")
    """A secp256r1 public key"""

    zklogin: "ZkLoginPublicIdentifier" = betterproto.message_field(4, group="scheme")
    """A zklogin public identifier"""


@dataclass(eq=False, repr=False)
class MultisigMember(betterproto.Message):
    """A member in a multisig committee."""

    public_key: "MultisigMemberPublicKey | None" = betterproto.message_field(
        1, optional=True
    )
    """The public key of the committee member."""

    weight: "int | None" = betterproto.uint32_field(2, optional=True)
    """The weight of this member's signature."""


@dataclass(eq=False, repr=False)
class MultisigCommittee(betterproto.Message):
    """A multisig committee."""

    members: "list[MultisigMember]" = betterproto.message_field(1)
    """A list of committee members and their corresponding weight."""

    threshold: "int | None" = betterproto.uint32_field(2, optional=True)
    """
    The threshold of signatures needed to validate a signature from
     this committee.
    """


@dataclass(eq=False, repr=False)
class MultisigAggregatedSignature(betterproto.Message):
    """Aggregated signature from members of a multisig committee."""

    signatures: "list[MultisigMemberSignature]" = betterproto.message_field(1)
    """
    The plain signatures encoded with signature scheme.
    
     The signatures must be in the same order as they are listed in the committee.
    """

    bitmap: "int | None" = betterproto.uint32_field(2, optional=True)
    """
    Bitmap indicating which committee members contributed to the
     signature.
    """

    legacy_bitmap: "RoaringBitmap | None" = betterproto.message_field(3, optional=True)
    """
    If present, means this signature's on-chain format uses the old
     legacy multisig format.
    """

    committee: "MultisigCommittee | None" = betterproto.message_field(4, optional=True)
    """The committee to use to validate this signature."""


@dataclass(eq=False, repr=False)
class MultisigMemberSignature(betterproto.Message):
    """A signature from a member of a multisig committee."""

    ed25519: bytes = betterproto.bytes_field(1, group="signature")
    """An ed25519 signature."""

    secp256_k1: bytes = betterproto.bytes_field(2, group="signature")
    """A secp256k1 signature."""

    secp256_r1: bytes = betterproto.bytes_field(3, group="signature")
    """A secp256r1 signature."""

    zklogin: "ZkLoginAuthenticator" = betterproto.message_field(4, group="signature")
    """A zklogin signature."""


@dataclass(eq=False, repr=False)
class ZkLoginAuthenticator(betterproto.Message):
    """A zklogin authenticator."""

    inputs: "ZkLoginInputs | None" = betterproto.message_field(1, optional=True)
    """Zklogin proof and inputs required to perform proof verification."""

    max_epoch: "int | None" = betterproto.uint64_field(2, optional=True)
    """Maximum epoch for which the proof is valid."""

    signature: "SimpleSignature | None" = betterproto.message_field(3, optional=True)
    """
    User signature with the public key attested to by the provided proof.
    """


@dataclass(eq=False, repr=False)
class ZkLoginInputs(betterproto.Message):
    """
    A zklogin groth16 proof and the required inputs to perform proof verification.
    """

    proof_points: "ZkLoginProof | None" = betterproto.message_field(1, optional=True)
    iss_base64_details: "ZkLoginClaim | None" = betterproto.message_field(
        2, optional=True
    )
    header_base64: "str | None" = betterproto.string_field(3, optional=True)
    address_seed: "Bn254FieldElement | None" = betterproto.message_field(
        4, optional=True
    )


@dataclass(eq=False, repr=False)
class ZkLoginProof(betterproto.Message):
    """A zklogin groth16 proof."""

    a: "CircomG1 | None" = betterproto.message_field(1, optional=True)
    b: "CircomG2 | None" = betterproto.message_field(2, optional=True)
    c: "CircomG1 | None" = betterproto.message_field(3, optional=True)


@dataclass(eq=False, repr=False)
class ZkLoginClaim(betterproto.Message):
    """A claim of the iss in a zklogin proof."""

    value: "str | None" = betterproto.string_field(1, optional=True)
    index_mod_4: "int | None" = betterproto.uint32_field(2, optional=True)


@dataclass(eq=False, repr=False)
class CircomG1(betterproto.Message):
    """A G1 point."""

    e0: "Bn254FieldElement | None" = betterproto.message_field(1, optional=True)
    e1: "Bn254FieldElement | None" = betterproto.message_field(2, optional=True)
    e2: "Bn254FieldElement | None" = betterproto.message_field(3, optional=True)


@dataclass(eq=False, repr=False)
class CircomG2(betterproto.Message):
    """A G2 point."""

    e00: "Bn254FieldElement | None" = betterproto.message_field(1, optional=True)
    e01: "Bn254FieldElement | None" = betterproto.message_field(2, optional=True)
    e10: "Bn254FieldElement | None" = betterproto.message_field(3, optional=True)
    e11: "Bn254FieldElement | None" = betterproto.message_field(4, optional=True)
    e20: "Bn254FieldElement | None" = betterproto.message_field(5, optional=True)
    e21: "Bn254FieldElement | None" = betterproto.message_field(6, optional=True)


@dataclass(eq=False, repr=False)
class Bn254FieldElement(betterproto.Message):
    """A point on the BN254 elliptic curve."""

    element: "bytes | None" = betterproto.bytes_field(1, optional=True)
    """32-byte big-endian field element."""


@dataclass(eq=False, repr=False)
class PasskeyAuthenticator(betterproto.Message):
    """
    A passkey authenticator.

     See
     [struct.PasskeyAuthenticator](https://mystenlabs.github.io/sui-rust-sdk/sui_sdk_types/struct.PasskeyAuthenticator.html#bcs)
     for more information on the requirements on the shape of the
     `client_data_json` field.
    """

    authenticator_data: "bytes | None" = betterproto.bytes_field(1, optional=True)
    """
    Opaque authenticator data for this passkey signature.
    
     See [Authenticator Data](https://www.w3.org/TR/webauthn-2/#sctn-authenticator-data) for
     more information on this field.
    """

    client_data_json: "str | None" = betterproto.string_field(2, optional=True)
    """
    Structured, unparsed, JSON for this passkey signature.
    
     See [CollectedClientData](https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata)
     for more information on this field.
    """

    signature: "SimpleSignature | None" = betterproto.message_field(3, optional=True)
    """A secp256r1 signature."""


@dataclass(eq=False, repr=False)
class ValidatorCommittee(betterproto.Message):
    """The validator set for a particular epoch."""

    epoch: "int | None" = betterproto.uint64_field(1, optional=True)
    """The epoch where this committee governs."""

    members: "list[ValidatorCommitteeMember]" = betterproto.message_field(2)
    """The committee members."""


@dataclass(eq=False, repr=False)
class ValidatorCommitteeMember(betterproto.Message):
    """A member of a validator committee."""

    public_key: "bytes | None" = betterproto.bytes_field(1, optional=True)
    """The 96-byte Bls12381 public key for this validator."""

    stake: "int | None" = betterproto.uint64_field(2, optional=True)
    """Stake weight this validator possesses."""


@dataclass(eq=False, repr=False)
class ValidatorAggregatedSignature(betterproto.Message):
    """/ An aggregated signature from multiple validators."""

    epoch: "int | None" = betterproto.uint64_field(1, optional=True)
    """
    The epoch when this signature was produced.
    
     This can be used to lookup the `ValidatorCommittee` from this epoch
     to verify this signature.
    """

    signature: "bytes | None" = betterproto.bytes_field(2, optional=True)
    """The 48-byte Bls12381 aggregated signature."""

    bitmap: "RoaringBitmap | None" = betterproto.message_field(3, optional=True)
    """
    Bitmap indicating which members of the committee contributed to
     this signature.
    """


@dataclass(eq=False, repr=False)
class RoaringBitmap(betterproto.Message):
    """
    A RoaringBitmap. See
     [RoaringFormatSpec](https://github.com/RoaringBitmap/RoaringFormatSpec) for the
     specification for the serialized format of `RoaringBitmap`s.
    """

    bitmap: "bytes | None" = betterproto.bytes_field(1, optional=True)
    """Serialized `RoaringBitmap`."""
