# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sui/rpc/v2alpha/live_data_service.proto, sui/rpc/v2alpha/move_package.proto, sui/rpc/v2alpha/move_package_service.proto, sui/rpc/v2alpha/signature_verification_service.proto, sui/rpc/v2alpha/subscription_service.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Ability",
    "AbilitySet",
    "Balance",
    "CoinMetadata",
    "CoinTreasury",
    "CommandOutput",
    "CommandResult",
    "DatatypeDescriptor",
    "DatatypeDescriptorDatatypeKind",
    "DynamicField",
    "DynamicFieldDynamicFieldKind",
    "FieldDescriptor",
    "FunctionDescriptor",
    "FunctionDescriptorVisibility",
    "GetBalanceRequest",
    "GetBalanceResponse",
    "GetCoinInfoRequest",
    "GetCoinInfoResponse",
    "GetDatatypeRequest",
    "GetDatatypeResponse",
    "GetFunctionRequest",
    "GetFunctionResponse",
    "GetModuleRequest",
    "GetModuleResponse",
    "GetPackageRequest",
    "GetPackageResponse",
    "ListBalancesRequest",
    "ListBalancesResponse",
    "ListDynamicFieldsRequest",
    "ListDynamicFieldsResponse",
    "ListOwnedObjectsRequest",
    "ListOwnedObjectsResponse",
    "ListPackageVersionsRequest",
    "ListPackageVersionsResponse",
    "LiveDataServiceStub",
    "Module",
    "MovePackageServiceStub",
    "OpenSignature",
    "OpenSignatureBody",
    "OpenSignatureBodyType",
    "OpenSignatureReference",
    "OwnedObject",
    "Package",
    "PackageVersion",
    "RegulatedCoinMetadata",
    "SignatureVerificationServiceStub",
    "SimulateTransactionRequest",
    "SimulateTransactionRequestVmChecks",
    "SimulateTransactionResponse",
    "SubscribeCheckpointsRequest",
    "SubscribeCheckpointsResponse",
    "SubscriptionServiceStub",
    "TypeParameter",
    "VariantDescriptor",
    "VerifySignatureRequest",
    "VerifySignatureResponse",
)

from collections.abc import AsyncIterator
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.7.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class Ability(betterproto2.Enum):
    """
    An `Ability` classifies what operations are permitted for a given type
    """

    UNKNOWN = 0

    COPY = 1
    """
    Allows values of types with this ability to be copied
    """

    DROP = 2
    """
    Allows values of types with this ability to be dropped.
    """

    STORE = 3
    """
    Allows values of types with this ability to exist inside a struct in global storage
    """

    KEY = 4
    """
    Allows the type to serve as a key for global storage operations
    """


class DatatypeDescriptorDatatypeKind(betterproto2.Enum):
    UNKNOWN = 0

    STRUCT = 1

    ENUM = 2


class DynamicFieldDynamicFieldKind(betterproto2.Enum):
    UNKNOWN = 0

    FIELD = 1

    OBJECT = 2


class FunctionDescriptorVisibility(betterproto2.Enum):
    UNKNOWN = 0

    PRIVATE = 1

    PUBLIC = 2

    FRIEND = 3


class OpenSignatureReference(betterproto2.Enum):
    UNKNOWN = 0

    IMMUTABLE = 1

    MUTABLE = 2


class OpenSignatureBodyType(betterproto2.Enum):
    UNKNOWN = 0

    ADDRESS = 1

    BOOL = 2

    U8 = 3

    U16 = 4

    U32 = 5

    U64 = 6

    U128 = 7

    U256 = 8

    VECTOR = 9

    _ = 10

    PARAMETER = 11


class SimulateTransactionRequestVmChecks(betterproto2.Enum):
    """
    buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    """

    ENABLED = 0
    """
    VM_CHECKS_UNKNOWN = 0;
    """

    DISABLED = 1


@dataclass(eq=False, repr=False)
class AbilitySet(betterproto2.Message):
    """
    A set of abilities for a type parameter
    """

    abilities: "list[Ability]" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, repeated=True
    )


default_message_pool.register_message("sui.rpc.v2alpha", "AbilitySet", AbilitySet)


@dataclass(eq=False, repr=False)
class Balance(betterproto2.Message):
    """
    Balance information for a specific coin type.
    """

    coin_type: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The type of the coin (e.g., 0x2::sui::SUI).
    """

    balance: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Shows the total balance of the coin in its smallest unit.
    """


default_message_pool.register_message("sui.rpc.v2alpha", "Balance", Balance)


@dataclass(eq=False, repr=False)
class CoinMetadata(betterproto2.Message):
    """
    Metadata for a coin type
    """

    id: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    ObjectId of the `0x2::coin::CoinMetadata` object.
    """

    decimals: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Number of decimal places to coin uses.
    """

    name: "str | None" = betterproto2.field(3, betterproto2.TYPE_STRING, optional=True)
    """
    Name for the token
    """

    symbol: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )
    """
    Symbol for the token
    """

    description: "str | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True
    )
    """
    Description of the token
    """

    icon_url: "str | None" = betterproto2.field(
        6, betterproto2.TYPE_STRING, optional=True
    )
    """
    URL for the token logo
    """


default_message_pool.register_message("sui.rpc.v2alpha", "CoinMetadata", CoinMetadata)


@dataclass(eq=False, repr=False)
class CoinTreasury(betterproto2.Message):
    """
    Information about a coin type's `0x2::coin::TreasuryCap` and its total available supply
    """

    id: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    ObjectId of the `0x2::coin::TreasuryCap` object.
    """

    total_supply: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Total available supply for this coin type.
    """


default_message_pool.register_message("sui.rpc.v2alpha", "CoinTreasury", CoinTreasury)


@dataclass(eq=False, repr=False)
class CommandOutput(betterproto2.Message):
    argument: "_v2beta__.Argument | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    value: "_v2beta__.Bcs | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    json: "___google__protobuf__.Value | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    JSON rendering of the output.
    """


default_message_pool.register_message("sui.rpc.v2alpha", "CommandOutput", CommandOutput)


@dataclass(eq=False, repr=False)
class CommandResult(betterproto2.Message):
    """
    An intermediate result/output from the execution of a single command
    """

    return_values: "list[CommandOutput]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    mutated_by_ref: "list[CommandOutput]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("sui.rpc.v2alpha", "CommandResult", CommandResult)


@dataclass(eq=False, repr=False)
class DatatypeDescriptor(betterproto2.Message):
    """
    Describes a Move Datatype.
    """

    type_name: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Fully qualified name of this Datatype.

    This is `<defining_id>::<module>::<name>`
    """

    defining_id: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    PackageId of the package where this Datatype is defined.

    A type's `defining_id` is the `storage_id` of the package version that first introduced or added that type.
    """

    module: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    Name of the module where this Datatype is defined
    """

    name: "str | None" = betterproto2.field(4, betterproto2.TYPE_STRING, optional=True)
    """
    Name of this Datatype
    """

    abilities: "list[Ability]" = betterproto2.field(
        5, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    This type's abilities
    """

    type_parameters: "list[TypeParameter]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Ability constraints and phantom status for this type's generic type parameters
    """

    kind: "DatatypeDescriptorDatatypeKind | None" = betterproto2.field(
        7, betterproto2.TYPE_ENUM, optional=True
    )
    """
    Indicates whether this datatype is a 'STRUCT' or an 'ENUM'
    """

    fields: "list[FieldDescriptor]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of fields if this Datatype is a struct.

    The order of the entries is the order of how the fields are defined.
    """

    variants: "list[VariantDescriptor]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of variants if this Datatype is an enum.

    The order of the entries is the order of how the variants are defined.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "DatatypeDescriptor", DatatypeDescriptor
)


@dataclass(eq=False, repr=False)
class DynamicField(betterproto2.Message):
    kind: "DynamicFieldDynamicFieldKind | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )

    parent: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    ObjectId of this dynamic field's parent.
    """

    field_id: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    ObjectId of this dynamic field.
    """

    name_type: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )
    """
    The type of the dynamic field "name"
    """

    name_value: "bytes | None" = betterproto2.field(
        5, betterproto2.TYPE_BYTES, optional=True
    )
    """
    The serialized move value of "name"
    """

    value_type: "str | None" = betterproto2.field(
        6, betterproto2.TYPE_STRING, optional=True
    )
    """
    The type of the dynamic field "value".

    If this is a dynamic object field then this is the type of the object
    itself (which is a child of this field), otherwise this is the type of the
    value of this field.
    """

    dynamic_object_id: "str | None" = betterproto2.field(
        7, betterproto2.TYPE_STRING, optional=True
    )
    """
    The ObjectId of the child object when a child is a dynamic
    object field.

    The presence or absence of this field can be used to determine if a child
    is a dynamic field or a dynamic child object
    """


default_message_pool.register_message("sui.rpc.v2alpha", "DynamicField", DynamicField)


@dataclass(eq=False, repr=False)
class FieldDescriptor(betterproto2.Message):
    """
    Descriptor of a field that belongs to a struct or enum variant
    """

    name: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Name of the field
    """

    position: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Order or position of the field in the struct or enum variant definition.
    """

    type: "OpenSignatureBody | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The type of the field
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "FieldDescriptor", FieldDescriptor
)


@dataclass(eq=False, repr=False)
class FunctionDescriptor(betterproto2.Message):
    """
    Descriptor of a Move function
    """

    name: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Name of the function
    """

    visibility: "FunctionDescriptorVisibility | None" = betterproto2.field(
        5, betterproto2.TYPE_ENUM, optional=True
    )
    """
    Whether the function is `public`, `private` or `public(friend)`
    """

    is_entry: "bool | None" = betterproto2.field(
        6, betterproto2.TYPE_BOOL, optional=True
    )
    """
    Whether the function is marked `entry` or not.
    """

    type_parameters: "list[AbilitySet]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Ability constraints for type parameters
    Each AbilitySet represents the constraints for one type parameter
    """

    parameters: "list[OpenSignature]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Formal parameter types.
    """

    returns: "list[OpenSignature]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Return types.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "FunctionDescriptor", FunctionDescriptor
)


@dataclass(eq=False, repr=False)
class GetBalanceRequest(betterproto2.Message):
    """
    Request message for `LiveDataService.GetBalance`.
    """

    owner: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Required. The owner's Sui address.
    """

    coin_type: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The type names for the coin (e.g., 0x2::sui::SUI).
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetBalanceRequest", GetBalanceRequest
)


@dataclass(eq=False, repr=False)
class GetBalanceResponse(betterproto2.Message):
    """
    Response message for `LiveDataService.GetBalance`.
    Return the total coin balance for one coin type, owned by the address owner.
    """

    balance: "Balance | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The balance information for the requested coin type.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetBalanceResponse", GetBalanceResponse
)


@dataclass(eq=False, repr=False)
class GetCoinInfoRequest(betterproto2.Message):
    """
    Request message for `NodeService.GetCoinInfo`.
    """

    coin_type: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The coin type to request information about
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetCoinInfoRequest", GetCoinInfoRequest
)


@dataclass(eq=False, repr=False)
class GetCoinInfoResponse(betterproto2.Message):
    """
    Response message for `NodeService.GetCoinInfo`.
    """

    coin_type: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The coin type.
    """

    metadata: "CoinMetadata | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This field will be populated with information about this coin
    type's `0x2::coin::CoinMetadata` if it exists and has not been wrapped.
    """

    treasury: "CoinTreasury | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This field will be populated with information about this coin
    type's `0x2::coin::TreasuryCap` if it exists and has not been wrapped.
    """

    regulated_metadata: "RegulatedCoinMetadata | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If this coin type is a regulated coin, this field will be
    populated with information about its `0x2::coin::RegulatedCoinMetadata`
    object.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetCoinInfoResponse", GetCoinInfoResponse
)


@dataclass(eq=False, repr=False)
class GetDatatypeRequest(betterproto2.Message):
    package_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The `storage_id` of the requested package.
    """

    module_name: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The name of the requested module.
    """

    name: "str | None" = betterproto2.field(3, betterproto2.TYPE_STRING, optional=True)
    """
    Required. The name of the requested datatype.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetDatatypeRequest", GetDatatypeRequest
)


@dataclass(eq=False, repr=False)
class GetDatatypeResponse(betterproto2.Message):
    datatype: "DatatypeDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The datatype.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetDatatypeResponse", GetDatatypeResponse
)


@dataclass(eq=False, repr=False)
class GetFunctionRequest(betterproto2.Message):
    package_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The `storage_id` of the requested package.
    """

    module_name: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The name of the requested module.
    """

    name: "str | None" = betterproto2.field(3, betterproto2.TYPE_STRING, optional=True)
    """
    Required. The name of the requested function.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetFunctionRequest", GetFunctionRequest
)


@dataclass(eq=False, repr=False)
class GetFunctionResponse(betterproto2.Message):
    function: "FunctionDescriptor | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The function.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetFunctionResponse", GetFunctionResponse
)


@dataclass(eq=False, repr=False)
class GetModuleRequest(betterproto2.Message):
    package_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The `storage_id` of the requested package.
    """

    module_name: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The name of the requested module.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetModuleRequest", GetModuleRequest
)


@dataclass(eq=False, repr=False)
class GetModuleResponse(betterproto2.Message):
    module: "Module | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The module.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetModuleResponse", GetModuleResponse
)


@dataclass(eq=False, repr=False)
class GetPackageRequest(betterproto2.Message):
    package_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The `storage_id` of the requested package.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetPackageRequest", GetPackageRequest
)


@dataclass(eq=False, repr=False)
class GetPackageResponse(betterproto2.Message):
    package: "Package | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The package.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "GetPackageResponse", GetPackageResponse
)


@dataclass(eq=False, repr=False)
class ListBalancesRequest(betterproto2.Message):
    """
    Request message for `LiveDataService.ListBalances`.
    """

    owner: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Required. The owner's Sui address.
    """

    page_size: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    The maximum number of balance entries to return. The service may return fewer than this value.
    If unspecified, at most `50` entries will be returned.
    The maximum value is `1000`; values above `1000` will be coerced to `1000`.
    """

    page_token: "bytes | None" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, optional=True
    )
    """
    A page token, received from a previous `ListBalances` call.
    Provide this to retrieve the subsequent page.

    When paginating, all other parameters provided to `ListBalances` must
    match the call that provided the page token.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "ListBalancesRequest", ListBalancesRequest
)


@dataclass(eq=False, repr=False)
class ListBalancesResponse(betterproto2.Message):
    """
    Response message for `LiveDataService.ListBalances`.
    Return the total coin balance for all coin types, owned by the address owner.
    """

    balances: "list[Balance]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of coin types and their respective balances.
    """

    next_page_token: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True
    )
    """
    A token, which can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "ListBalancesResponse", ListBalancesResponse
)


@dataclass(eq=False, repr=False)
class ListDynamicFieldsRequest(betterproto2.Message):
    """
    Request message for `NodeService.ListDynamicFields`
    """

    parent: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The `UID` of the parent, which owns the collections of dynamic fields.
    """

    page_size: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    The maximum number of dynamic fields to return. The service may return fewer than this value.
    If unspecified, at most `50` entries will be returned.
    The maximum value is `1000`; values above `1000` will be coerced to `1000`.
    """

    page_token: "bytes | None" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, optional=True
    )
    """
    A page token, received from a previous `ListDynamicFields` call.
    Provide this to retrieve the subsequent page.

    When paginating, all other parameters provided to `ListDynamicFields` must
    match the call that provided the page token.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "ListDynamicFieldsRequest", ListDynamicFieldsRequest
)


@dataclass(eq=False, repr=False)
class ListDynamicFieldsResponse(betterproto2.Message):
    """
    Response message for `NodeService.ListDynamicFields`
    """

    dynamic_fields: "list[DynamicField]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Page of dynamic fields owned by the specified parent.
    """

    next_page_token: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True
    )
    """
    A token, which can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "ListDynamicFieldsResponse", ListDynamicFieldsResponse
)


@dataclass(eq=False, repr=False)
class ListOwnedObjectsRequest(betterproto2.Message):
    owner: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Required. The address of the account that owns the objects.
    """

    object_type: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )
    """
    Optional type filter to limit the types of objects listed.

    Providing an object type with no type params will return objects of that
    type with any type parameter, e.g. `0x2::coin::Coin` will return all
    `Coin<T>` objects regardless of the type parameter `T`. Providing a type
    with a type param will retrict the returned objects to only those objects
    that match the provided type parameters, e.g.
    `0x2::coin::Coin<0x2::sui::SUI>` will only return `Coin<SUI>` objects.
    """

    page_size: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    The maximum number of entries return. The service may return fewer than this value.
    If unspecified, at most `50` entries will be returned.
    The maximum value is `1000`; values above `1000` will be coerced to `1000`.
    """

    page_token: "bytes | None" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, optional=True
    )
    """
    A page token, received from a previous `ListOwnedObjects` call.
    Provide this to retrieve the subsequent page.

    When paginating, all other parameters provided to `ListOwnedObjects` must
    match the call that provided the page token.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "ListOwnedObjectsRequest", ListOwnedObjectsRequest
)


@dataclass(eq=False, repr=False)
class ListOwnedObjectsResponse(betterproto2.Message):
    objects: "list[OwnedObject]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Page of dynamic fields owned by the specified parent.
    """

    next_page_token: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True
    )
    """
    A token, which can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "ListOwnedObjectsResponse", ListOwnedObjectsResponse
)


@dataclass(eq=False, repr=False)
class ListPackageVersionsRequest(betterproto2.Message):
    package_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The `storage_id` of any version of the package.
    """

    page_size: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    The maximum number of versions to return. The service may return fewer than this value.
    If unspecified, at most `1000` entries will be returned.
    The maximum value is `10000`; values above `10000` will be coerced to `10000`.
    """

    page_token: "bytes | None" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, optional=True
    )
    """
    A page token, received from a previous `ListPackageVersions` call.
    Provide this to retrieve the subsequent page.

    When paginating, all other parameters provided to `ListPackageVersions` must
    match the call that provided the page token.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "ListPackageVersionsRequest", ListPackageVersionsRequest
)


@dataclass(eq=False, repr=False)
class ListPackageVersionsResponse(betterproto2.Message):
    versions: "list[PackageVersion]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of all package versions, ordered by version.
    """

    next_page_token: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True
    )
    """
    A token, which can be sent as `page_token` to retrieve the next page.
    If this field is omitted, there are no subsequent pages.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "ListPackageVersionsResponse", ListPackageVersionsResponse
)


@dataclass(eq=False, repr=False)
class Module(betterproto2.Message):
    """
    A Move Module.
    """

    name: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Name of this module
    """

    datatypes: "list[DatatypeDescriptor]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of DataTypes defined by this module.
    """

    functions: "list[FunctionDescriptor]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of Functions defined by this module.
    """


default_message_pool.register_message("sui.rpc.v2alpha", "Module", Module)


@dataclass(eq=False, repr=False)
class OpenSignature(betterproto2.Message):
    """
    Representation of a type signature that could appear as a function parameter or return value.
    """

    reference: "OpenSignatureReference | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )

    body: "OpenSignatureBody | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("sui.rpc.v2alpha", "OpenSignature", OpenSignature)


@dataclass(eq=False, repr=False)
class OpenSignatureBody(betterproto2.Message):
    """
    Representation of a type signature that could appear as a field type for a struct or enum
    """

    type: "OpenSignatureBodyType | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )
    """
    Type of this signature
    """

    type_name: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Fully qualified name of the datatype when `type` is `DATATYPE`
    """

    type_parameter_instantiation: "list[OpenSignatureBody]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set when `type` is `VECTOR` or `DATATYPE`
    """

    type_parameter: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Position of the type parameter as defined in the containing data type descriptor when `type` is `TYPE_PARAMETER`
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "OpenSignatureBody", OpenSignatureBody
)


@dataclass(eq=False, repr=False)
class OwnedObject(betterproto2.Message):
    object_id: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )

    version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )

    digest: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )

    owner: "_v2beta__.Owner | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )

    object_type: "str | None" = betterproto2.field(
        6, betterproto2.TYPE_STRING, optional=True
    )

    balance: "int | None" = betterproto2.field(
        200, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Current balance if this object is a `0x2::coin::Coin<T>`
    """


default_message_pool.register_message("sui.rpc.v2alpha", "OwnedObject", OwnedObject)


@dataclass(eq=False, repr=False)
class Package(betterproto2.Message):
    """
    A Move Package
    """

    storage_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The PackageId of this package

    A package's `storage_id` is the Sui ObjectId of the package on-chain.
    Outside of system packages the `storage_id` for every package version is
    different.
    """

    original_id: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The PackageId of the first published version of this package.

    A package's `original_id` (sometimes also called its `runtime_id`) is the
    `storage_id` of the first version of this package that has been published.
    The `original_id`/`runtime_id` is stable across all versions of the
    package and does not ever change.
    """

    version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The version of this package
    """

    modules: "list[Module]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The modules defined by this package
    """


default_message_pool.register_message("sui.rpc.v2alpha", "Package", Package)


@dataclass(eq=False, repr=False)
class PackageVersion(betterproto2.Message):
    """
    A simplified representation of a package version
    """

    package_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The storage ID of this package version
    """

    version: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The version number
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "PackageVersion", PackageVersion
)


@dataclass(eq=False, repr=False)
class RegulatedCoinMetadata(betterproto2.Message):
    """
    Information about a regulated coin, which indicates that it makes use of the transfer deny list.
    """

    id: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    ObjectId of the `0x2::coin::RegulatedCoinMetadata` object.
    """

    coin_metadata_object: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The ID of the coin's `CoinMetadata` object.
    """

    deny_cap_object: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    The ID of the coin's `DenyCap` object.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "RegulatedCoinMetadata", RegulatedCoinMetadata
)


@dataclass(eq=False, repr=False)
class SimulateTransactionRequest(betterproto2.Message):
    transaction: "_v2beta__.Transaction | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    checks: "SimulateTransactionRequestVmChecks | None" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, optional=True
    )
    """
    Specify whether checks should be ENABLED (default) or DISABLED by the vm while executing the transaction
    """

    do_gas_selection: "bool | None" = betterproto2.field(
        4, betterproto2.TYPE_BOOL, optional=True
    )
    """
    Perform gas selection based on a budget estimation and include the
    selected gas payment and budget in the response.

    This option will be ignored if `checks` is `DISABLED`.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "SimulateTransactionRequest", SimulateTransactionRequest
)


@dataclass(eq=False, repr=False)
class SimulateTransactionResponse(betterproto2.Message):
    transaction: "_v2beta__.ExecutedTransaction | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    outputs: "list[CommandResult]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sui.rpc.v2alpha", "SimulateTransactionResponse", SimulateTransactionResponse
)


@dataclass(eq=False, repr=False)
class SubscribeCheckpointsRequest(betterproto2.Message):
    """
    Request message for SubscriptionService.SubscribeCheckpoints
    """

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional. Mask for specifiying which parts of the
    SubscribeCheckpointsResponse should be returned.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "SubscribeCheckpointsRequest", SubscribeCheckpointsRequest
)


@dataclass(eq=False, repr=False)
class SubscribeCheckpointsResponse(betterproto2.Message):
    """
    Response message for SubscriptionService.SubscribeCheckpoints
    """

    cursor: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Required. The checkpoint sequence number and value of the current cursor
    into the checkpoint stream
    """

    checkpoint: "_v2beta__.Checkpoint | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The requested data for this checkpoint
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "SubscribeCheckpointsResponse", SubscribeCheckpointsResponse
)


@dataclass(eq=False, repr=False)
class TypeParameter(betterproto2.Message):
    """
    A generic type parameter used in the declaration of a struct or enum.
    """

    constraints: "list[Ability]" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    The type parameter constraints
    """

    is_phantom: "bool | None" = betterproto2.field(
        2, betterproto2.TYPE_BOOL, optional=True
    )
    """
    Whether the parameter is declared as phantom
    """


default_message_pool.register_message("sui.rpc.v2alpha", "TypeParameter", TypeParameter)


@dataclass(eq=False, repr=False)
class VariantDescriptor(betterproto2.Message):
    """
    Descriptor of an enum variant
    """

    name: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Name of the variant
    """

    position: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Order or position of the variant in the enum definition.
    """

    fields: "list[FieldDescriptor]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of fields defined by this variant.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "VariantDescriptor", VariantDescriptor
)


@dataclass(eq=False, repr=False)
class VerifySignatureRequest(betterproto2.Message):
    message: "_v2beta__.Bcs | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The message to verify against.

    Today the only supported message types are `PersonalMessage` and
    `TransactionData` and the `Bcs.name` must be set to indicate which type of
    message is being verified.
    """

    signature: "_v2beta__.UserSignature | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The siganture to verify.
    """

    address: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    Optional. Address to validate against the provided signature.

    If provided, this address will be compared against the the address derived
    from the provide signature and a successful response will only be returned
    if they match.
    """

    jwks: "list[_v2beta__.ActiveJwk]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The set of JWKs to use when verifying Zklogin signatures.
    If this is empty the current set of valid JWKs stored onchain will be used
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "VerifySignatureRequest", VerifySignatureRequest
)


@dataclass(eq=False, repr=False)
class VerifySignatureResponse(betterproto2.Message):
    is_valid: "bool | None" = betterproto2.field(
        1, betterproto2.TYPE_BOOL, optional=True
    )
    """
    Indicates if the provided signature was valid given the requested parameters.
    """

    reason: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    If `is_valid` is `false`, this is the reason for why the signature verification failed.
    """


default_message_pool.register_message(
    "sui.rpc.v2alpha", "VerifySignatureResponse", VerifySignatureResponse
)


class LiveDataServiceStub(betterproto2.ServiceStub):
    async def list_dynamic_fields(
        self,
        message: "ListDynamicFieldsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListDynamicFieldsResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.LiveDataService/ListDynamicFields",
            message,
            ListDynamicFieldsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_owned_objects(
        self,
        message: "ListOwnedObjectsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListOwnedObjectsResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.LiveDataService/ListOwnedObjects",
            message,
            ListOwnedObjectsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_coin_info(
        self,
        message: "GetCoinInfoRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetCoinInfoResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.LiveDataService/GetCoinInfo",
            message,
            GetCoinInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_balance(
        self,
        message: "GetBalanceRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetBalanceResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.LiveDataService/GetBalance",
            message,
            GetBalanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_balances(
        self,
        message: "ListBalancesRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListBalancesResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.LiveDataService/ListBalances",
            message,
            ListBalancesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def simulate_transaction(
        self,
        message: "SimulateTransactionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "SimulateTransactionResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.LiveDataService/SimulateTransaction",
            message,
            SimulateTransactionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MovePackageServiceStub(betterproto2.ServiceStub):
    async def get_package(
        self,
        message: "GetPackageRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetPackageResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.MovePackageService/GetPackage",
            message,
            GetPackageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_module(
        self,
        message: "GetModuleRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetModuleResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.MovePackageService/GetModule",
            message,
            GetModuleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_datatype(
        self,
        message: "GetDatatypeRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetDatatypeResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.MovePackageService/GetDatatype",
            message,
            GetDatatypeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_function(
        self,
        message: "GetFunctionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetFunctionResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.MovePackageService/GetFunction",
            message,
            GetFunctionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_package_versions(
        self,
        message: "ListPackageVersionsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ListPackageVersionsResponse":
        return await self._unary_unary(
            "/sui.rpc.v2alpha.MovePackageService/ListPackageVersions",
            message,
            ListPackageVersionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SignatureVerificationServiceStub(betterproto2.ServiceStub):
    async def verify_signature(
        self,
        message: "VerifySignatureRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "VerifySignatureResponse":
        """
        Perform signature verification of a UserSignature against the provided message.
        """

        return await self._unary_unary(
            "/sui.rpc.v2alpha.SignatureVerificationService/VerifySignature",
            message,
            VerifySignatureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SubscriptionServiceStub(betterproto2.ServiceStub):
    async def subscribe_checkpoints(
        self,
        message: "SubscribeCheckpointsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[SubscribeCheckpointsResponse]":
        """
        Subscribe to the stream of checkpoints.

        This API provides a subscription to the checkpoint stream for the Sui
        blockchain. When a subscription is initialized the stream will begin with
        the latest executed checkpoint as seen by the server. Responses are
        gaurenteed to return checkpoints in-order and without gaps. This enables
        clients to know exactly the last checkpoint they have processed and in the
        event the subscription terminates (either by the client/server or by the
        connection breaking), clients will be able to reinitailize a subscription
        and then leverage other APIs in order to request data for the checkpoints
        they missed.
        """

        async for response in self._unary_stream(
            "/sui.rpc.v2alpha.SubscriptionService/SubscribeCheckpoints",
            message,
            SubscribeCheckpointsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


from ....google import protobuf as ___google__protobuf__
from .. import v2beta as _v2beta__
