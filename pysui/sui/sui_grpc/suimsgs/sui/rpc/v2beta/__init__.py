# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sui/rpc/v2beta/argument.proto, sui/rpc/v2beta/balance_change.proto, sui/rpc/v2beta/bcs.proto, sui/rpc/v2beta/checkpoint.proto, sui/rpc/v2beta/checkpoint_contents.proto, sui/rpc/v2beta/checkpoint_summary.proto, sui/rpc/v2beta/effects.proto, sui/rpc/v2beta/epoch.proto, sui/rpc/v2beta/event.proto, sui/rpc/v2beta/executed_transaction.proto, sui/rpc/v2beta/execution_status.proto, sui/rpc/v2beta/gas_cost_summary.proto, sui/rpc/v2beta/input.proto, sui/rpc/v2beta/ledger_service.proto, sui/rpc/v2beta/object.proto, sui/rpc/v2beta/object_reference.proto, sui/rpc/v2beta/owner.proto, sui/rpc/v2beta/protocol_config.proto, sui/rpc/v2beta/signature.proto, sui/rpc/v2beta/signature_scheme.proto, sui/rpc/v2beta/transaction.proto, sui/rpc/v2beta/transaction_execution_service.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ArgumentArgumentKind",
    "ChangedObjectIdOperation",
    "ChangedObjectInputObjectState",
    "ChangedObjectOutputObjectState",
    "CheckpointCommitmentCheckpointCommitmentKind",
    "CommandArgumentErrorCommandArgumentErrorKind",
    "ExecutionErrorExecutionErrorKind",
    "ExecutionTimeObservationExecutionTimeObservationKind",
    "InputInputKind",
    "OwnerOwnerKind",
    "PackageUpgradeErrorPackageUpgradeErrorKind",
    "SignatureScheme",
    "TransactionExpirationTransactionExpirationKind",
    "TypeArgumentErrorTypeArgumentErrorKind",
    "UnchangedSharedObjectUnchangedSharedObjectKind",
    "ActiveJwk",
    "Argument",
    "AuthenticatorStateExpire",
    "AuthenticatorStateUpdate",
    "BalanceChange",
    "BatchGetObjectsRequest",
    "BatchGetObjectsResponse",
    "BatchGetTransactionsRequest",
    "BatchGetTransactionsResponse",
    "Bcs",
    "CanceledTransaction",
    "CanceledTransactions",
    "ChangedObject",
    "ChangeEpoch",
    "Checkpoint",
    "CheckpointCommitment",
    "CheckpointContents",
    "CheckpointedTransactionInfo",
    "CheckpointSummary",
    "CircomG1",
    "CircomG2",
    "Command",
    "CommandArgumentError",
    "ConsensusCommitPrologue",
    "ConsensusDeterminedVersionAssignments",
    "EndOfEpochData",
    "EndOfEpochTransaction",
    "EndOfEpochTransactionKind",
    "Epoch",
    "Event",
    "ExecutedTransaction",
    "ExecuteTransactionRequest",
    "ExecuteTransactionResponse",
    "ExecutionError",
    "ExecutionStatus",
    "ExecutionTimeObservation",
    "ExecutionTimeObservations",
    "GasCostSummary",
    "GasPayment",
    "GenesisTransaction",
    "GetCheckpointRequest",
    "GetEpochRequest",
    "GetObjectRequest",
    "GetServiceInfoRequest",
    "GetServiceInfoResponse",
    "GetTransactionRequest",
    "Input",
    "Jwk",
    "JwkId",
    "MakeMoveVector",
    "MergeCoins",
    "MoveCall",
    "MoveLocation",
    "MoveModule",
    "MultisigAggregatedSignature",
    "MultisigCommittee",
    "MultisigMember",
    "MultisigMemberPublicKey",
    "MultisigMemberSignature",
    "Object",
    "ObjectReference",
    "Owner",
    "PackageUpgradeError",
    "PasskeyAuthenticator",
    "ProgrammableTransaction",
    "ProtocolConfig",
    "Publish",
    "RandomnessStateUpdate",
    "SizeError",
    "SplitCoins",
    "SystemPackage",
    "Transaction",
    "TransactionEffects",
    "TransactionEvents",
    "TransactionExpiration",
    "TransactionFinality",
    "TransactionKind",
    "TransferObjects",
    "TypeArgumentError",
    "TypeOrigin",
    "UnchangedSharedObject",
    "Upgrade",
    "UpgradeInfo",
    "UserSignature",
    "ValidatorAggregatedSignature",
    "ValidatorCommittee",
    "ValidatorCommitteeMember",
    "ValidatorExecutionTimeObservation",
    "VersionAssignment",
    "ZkLoginAuthenticator",
    "ZkLoginClaim",
    "ZkLoginInputs",
    "ZkLoginProof",
    "ZkLoginPublicIdentifier",
    "LedgerServiceStub",
    "LedgerServiceBase",
    "TransactionExecutionServiceStub",
    "TransactionExecutionServiceBase",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2

from ....message_pool import default_message_pool

if TYPE_CHECKING:
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


class ArgumentArgumentKind(betterproto2.Enum):
    ARGUMENT_KIND_UNKNOWN = 0

    GAS = 1
    """
    The gas coin.
    """

    INPUT = 2
    """
    One of the input objects or primitive values (from
    `ProgrammableTransaction` inputs).
    """

    RESULT = 3
    """
    The result of another command (from `ProgrammableTransaction` commands).
    """


class ChangedObjectIdOperation(betterproto2.Enum):
    ID_OPERATION_UNKNOWN = 0

    NONE = 1

    CREATED = 2

    DELETED = 3


class ChangedObjectInputObjectState(betterproto2.Enum):
    INPUT_OBJECT_STATE_UNKNOWN = 0

    INPUT_OBJECT_STATE_DOES_NOT_EXIST = 1

    INPUT_OBJECT_STATE_EXISTS = 2


class ChangedObjectOutputObjectState(betterproto2.Enum):
    OUTPUT_OBJECT_STATE_UNKNOWN = 0

    OUTPUT_OBJECT_STATE_DOES_NOT_EXIST = 1

    OUTPUT_OBJECT_STATE_OBJECT_WRITE = 2

    OUTPUT_OBJECT_STATE_PACKAGE_WRITE = 3


class CheckpointCommitmentCheckpointCommitmentKind(betterproto2.Enum):
    CHECKPOINT_COMMITMENT_KIND_UNKNOWN = 0

    ECMH_LIVE_OBJECT_SET = 1
    """
    An elliptic curve multiset hash attesting to the set of objects that
    comprise the live state of the Sui blockchain.
    """


class CommandArgumentErrorCommandArgumentErrorKind(betterproto2.Enum):
    COMMAND_ARGUMENT_ERROR_KIND_UNKNOWN = 0

    TYPE_MISMATCH = 1
    """
    The type of the value does not match the expected type.
    """

    INVALID_BCS_BYTES = 2
    """
    The argument cannot be deserialized into a value of the specified type.
    """

    INVALID_USAGE_OF_PURE_ARGUMENT = 3
    """
    The argument cannot be instantiated from raw bytes.
    """

    INVALID_ARGUMENT_TO_PRIVATE_ENTRY_FUNCTION = 4
    """
    Invalid argument to private entry function.
    Private entry functions cannot take arguments from other Move functions.
    """

    INDEX_OUT_OF_BOUNDS = 5
    """
    Out of bounds access to input or results.

    `index` field will be set indicating the invalid index value.
    """

    SECONDARY_INDEX_OUT_OF_BOUNDS = 6
    """
    Out of bounds access to subresult.

    `index` and `subresult` fields will be set indicating the invalid index value.
    """

    INVALID_RESULT_ARITY = 7
    """
    Invalid usage of result.
    Expected a single result but found either no return value or multiple.
    `index` field will be set indicating the invalid index value.
    """

    INVALID_GAS_COIN_USAGE = 8
    """
    Invalid usage of gas coin.
    The gas coin can only be used by-value with a `TransferObject` command.
    """

    INVALID_VALUE_USAGE = 9
    """
    Invalid usage of Move value.
       - Mutably borrowed values require unique usage.
       - Immutably borrowed values cannot be taken or borrowed mutably.
       - Taken values cannot be used again.
    """

    INVALID_OBJECT_BY_VALUE = 10
    """
    Immutable objects cannot be passed by-value.
    """

    INVALID_OBJECT_BY_MUT_REF = 11
    """
    Immutable objects cannot be passed by mutable reference, `&mut`.
    """

    SHARED_OBJECT_OPERATION_NOT_ALLOWED = 12
    """
    Shared object operations such as wrapping, freezing, or converting to owned are not
    allowed.
    """


class ExecutionErrorExecutionErrorKind(betterproto2.Enum):
    EXECUTION_ERROR_KIND_UNKNOWN = 0

    INSUFFICIENT_GAS = 1
    """
    Insufficient gas.
    """

    INVALID_GAS_OBJECT = 2
    """
    Invalid `Gas` object.
    """

    INVARIANT_VIOLATION = 3
    """
    Invariant violation.
    """

    FEATURE_NOT_YET_SUPPORTED = 4
    """
    Attempted to use feature that is not supported yet.
    """

    OBJECT_TOO_BIG = 5
    """
    Move object is larger than the maximum allowed size.
    """

    PACKAGE_TOO_BIG = 6
    """
    Package is larger than the maximum allowed size.
    """

    CIRCULAR_OBJECT_OWNERSHIP = 7
    """
    Circular object ownership.
    """

    INSUFFICIENT_COIN_BALANCE = 8
    """
    
    Coin errors.

    Insufficient coin balance for requested operation.
    """

    COIN_BALANCE_OVERFLOW = 9
    """
    Coin balance overflowed an u64.
    """

    PUBLISH_ERROR_NON_ZERO_ADDRESS = 10
    """
    
    Publish/Upgrade errors.

    Publish error, non-zero address.
    The modules in the package must have their self-addresses set to zero.
    """

    SUI_MOVE_VERIFICATION_ERROR = 11
    """
    Sui Move bytecode verification error.
    """

    MOVE_PRIMITIVE_RUNTIME_ERROR = 12
    """
    
    MoveVm errors.

    Error from a non-abort instruction.
    Possible causes:
        Arithmetic error, stack overflow, max value depth, or similar.
    """

    MOVE_ABORT = 13
    """
    Move runtime abort.
    """

    VM_VERIFICATION_OR_DESERIALIZATION_ERROR = 14
    """
    Bytecode verification error.
    """

    VM_INVARIANT_VIOLATION = 15
    """
    MoveVm invariant violation.
    """

    FUNCTION_NOT_FOUND = 16
    """
    
    Programmable transaction errors.

    Function not found.
    """

    ARITY_MISMATCH = 17
    """
    Parity mismatch for Move function.
    The number of arguments does not match the number of parameters.
    """

    TYPE_ARITY_MISMATCH = 18
    """
    Type parity mismatch for Move function.
    Mismatch between the number of actual versus expected type arguments.
    """

    NON_ENTRY_FUNCTION_INVOKED = 19
    """
    Non-entry function invoked. Move Call must start with an entry function.
    """

    COMMAND_ARGUMENT_ERROR = 20
    """
    Invalid command argument.
    """

    TYPE_ARGUMENT_ERROR = 21
    """
    Type argument error.
    """

    UNUSED_VALUE_WITHOUT_DROP = 22
    """
    Unused result without the drop ability.
    """

    INVALID_PUBLIC_FUNCTION_RETURN_TYPE = 23
    """
    Invalid public Move function signature.
    Unsupported return type for return value.
    """

    INVALID_TRANSFER_OBJECT = 24
    """
    Invalid transfer object, object does not have public transfer.
    """

    EFFECTS_TOO_LARGE = 25
    """
    
    Post-execution errors.

    Effects from the transaction are too large.
    """

    PUBLISH_UPGRADE_MISSING_DEPENDENCY = 26
    """
    Publish or Upgrade is missing dependency.
    """

    PUBLISH_UPGRADE_DEPENDENCY_DOWNGRADE = 27
    """
    Publish or upgrade dependency downgrade.

    Indirect (transitive) dependency of published or upgraded package has been assigned an
    on-chain version that is less than the version required by one of the package's
    transitive dependencies.
    """

    PACKAGE_UPGRADE_ERROR = 28
    """
    Invalid package upgrade.
    """

    WRITTEN_OBJECTS_TOO_LARGE = 29
    """
    Indicates the transaction tried to write objects too large to storage.
    """

    CERTIFICATE_DENIED = 30
    """
    Certificate is on the deny list.
    """

    SUI_MOVE_VERIFICATION_TIMEDOUT = 31
    """
    Sui Move bytecode verification timed out.
    """

    SHARED_OBJECT_OPERATION_NOT_ALLOWED = 32
    """
    The requested shared object operation is not allowed.
    """

    INPUT_OBJECT_DELETED = 33
    """
    Requested shared object has been deleted.
    """

    EXECUTION_CANCELED_DUE_TO_SHARED_OBJECT_CONGESTION = 34
    """
    Certificate is canceled due to congestion on shared objects.
    """

    ADDRESS_DENIED_FOR_COIN = 35
    """
    Address is denied for this coin type.
    """

    COIN_TYPE_GLOBAL_PAUSE = 36
    """
    Coin type is globally paused for use.
    """

    EXECUTION_CANCELED_DUE_TO_RANDOMNESS_UNAVAILABLE = 37
    """
    Certificate is canceled because randomness could not be generated this epoch.
    """


class ExecutionTimeObservationExecutionTimeObservationKind(betterproto2.Enum):
    EXECUTION_TIME_OBSERVATION_KIND_UNKNOWN = 0

    MOVE_ENTRY_POINT = 1

    TRANSFER_OBJECTS = 2

    SPLIT_COINS = 3

    MERGE_COINS = 4

    PUBLISH = 5

    MAKE_MOVE_VECTOR = 6

    UPGRADE = 7


class InputInputKind(betterproto2.Enum):
    INPUT_KIND_UNKNOWN = 0

    PURE = 1
    """
    A move value serialized as BCS.
    """

    IMMUTABLE_OR_OWNED = 2
    """
    A Move object that is either immutable or address owned.
    """

    SHARED = 3
    """
    A Move object whose owner is "Shared".
    """

    RECEIVING = 4
    """
    A Move object that is attempted to be received in this transaction.
    """


class OwnerOwnerKind(betterproto2.Enum):
    OWNER_KIND_UNKNOWN = 0

    ADDRESS = 1

    OBJECT = 2

    SHARED = 3

    IMMUTABLE = 4


class PackageUpgradeErrorPackageUpgradeErrorKind(betterproto2.Enum):
    PACKAGE_UPGRADE_ERROR_KIND_UNKNOWN = 0

    UNABLE_TO_FETCH_PACKAGE = 1
    """
    Unable to fetch package.
    """

    NOT_A_PACKAGE = 2
    """
    Object is not a package.
    """

    INCOMPATIBLE_UPGRADE = 3
    """
    Package upgrade is incompatible with previous version.
    """

    DIGETS_DOES_NOT_MATCH = 4
    """
    Digest in upgrade ticket and computed digest differ.
    """

    UNKNOWN_UPGRADE_POLICY = 5
    """
    Upgrade policy is not valid.
    """

    PACKAGE_ID_DOES_NOT_MATCH = 6
    """
    Package ID does not match `PackageId` in upgrade ticket.
    """


class SignatureScheme(betterproto2.Enum):
    """
    Flag use to disambiguate the signature schemes supported by Sui.

    Note: the enum values defined by this proto message exactly match their
    expected BCS serialized values when serialized as a u8. See
    [enum.SignatureScheme](https://mystenlabs.github.io/sui-rust-sdk/sui_sdk_types/enum.SignatureScheme.html)
    for more information about signature schemes.
    """

    ED25519 = 0

    SECP256K1 = 1

    SECP256R1 = 2

    MULTISIG = 3

    BLS12381 = 4

    ZKLOGIN = 5

    PASSKEY = 6


class TransactionExpirationTransactionExpirationKind(betterproto2.Enum):
    TRANSACTION_EXPIRATION_KIND_UNKNOWN = 0

    NONE = 1
    """
    The transaction has no expiration.
    """

    EPOCH = 2
    """
    Validators won't sign and execute transaction unless the expiration epoch
    is greater than or equal to the current epoch.
    """


class TypeArgumentErrorTypeArgumentErrorKind(betterproto2.Enum):
    TYPE_ARGUMENT_ERROR_KIND_UNKNOWN = 0

    TYPE_NOT_FOUND = 1
    """
    A type was not found in the module specified.
    """

    CONSTRAINT_NOT_SATISFIED = 2
    """
    A type provided did not match the specified constraint.
    """


class UnchangedSharedObjectUnchangedSharedObjectKind(betterproto2.Enum):
    UNCHANGED_SHARED_OBJECT_KIND_UNKNOWN = 0

    READ_ONLY_ROOT = 1
    """
    Read-only shared object from the input.
    """

    MUTATE_DELETED = 2
    """
    Deleted shared objects that appear mutably/owned in the input.
    """

    READ_DELETED = 3
    """
    Deleted shared objects that appear as read-only in the input.
    """

    CANCELED = 4
    """
    Shared objects that was congested and resulted in this transaction being
    canceled.
    """

    PER_EPOCH_CONFIG = 5
    """
    Read of a per-epoch config object that should remain the same during an epoch.
    """


@dataclass(eq=False, repr=False)
class ActiveJwk(betterproto2.Message):
    """
    A new JWK.
    """

    id: "JwkId | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Identifier used to uniquely identify a JWK.
    """

    jwk: "Jwk | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The JWK.
    """

    epoch: "int | None" = betterproto2.field(3, betterproto2.TYPE_UINT64, optional=True)
    """
    Most recent epoch in which the JWK was validated.
    """


default_message_pool.register_message("sui.rpc.v2beta", "ActiveJwk", ActiveJwk)


@dataclass(eq=False, repr=False)
class Argument(betterproto2.Message):
    """
    An argument to a programmable transaction command.
    """

    kind: "ArgumentArgumentKind | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )

    index: "int | None" = betterproto2.field(2, betterproto2.TYPE_UINT32, optional=True)
    """
    Index of an input or the result of another command based on `kind`.
    """

    subresult: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Used to access a nested result when `kind` is `RESULT`.
    """


default_message_pool.register_message("sui.rpc.v2beta", "Argument", Argument)


@dataclass(eq=False, repr=False)
class AuthenticatorStateExpire(betterproto2.Message):
    """
    Expire old JWKs.
    """

    min_epoch: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Expire JWKs that have a lower epoch than this.
    """

    authenticator_object_initial_shared_version: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The initial version of the authenticator object that it was shared at.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "AuthenticatorStateExpire", AuthenticatorStateExpire
)


@dataclass(eq=False, repr=False)
class AuthenticatorStateUpdate(betterproto2.Message):
    """
    Update the set of valid JWKs.
    """

    epoch: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT64, optional=True)
    """
    Epoch of the authenticator state update transaction.
    """

    round: "int | None" = betterproto2.field(2, betterproto2.TYPE_UINT64, optional=True)
    """
    Consensus round of the authenticator state update.
    """

    new_active_jwks: "list[ActiveJwk]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Newly active JWKs.
    """

    authenticator_object_initial_shared_version: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The initial version of the authenticator object that it was shared at.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "AuthenticatorStateUpdate", AuthenticatorStateUpdate
)


@dataclass(eq=False, repr=False)
class BalanceChange(betterproto2.Message):
    """
    The delta, or change, in balance for an address for a particular `Coin` type.
    """

    address: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The account address that is affected by this balance change event.
    """

    coin_type: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The `Coin` type of this balance change event.
    """

    amount: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    The amount or change in balance.
    """


default_message_pool.register_message("sui.rpc.v2beta", "BalanceChange", BalanceChange)


@dataclass(eq=False, repr=False)
class BatchGetObjectsRequest(betterproto2.Message):
    requests: "list[GetObjectRequest]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Mask specifying which fields to read.
    If no mask is specified, defaults to `object_id,version,digest`.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "BatchGetObjectsRequest", BatchGetObjectsRequest
)


@dataclass(eq=False, repr=False)
class BatchGetObjectsResponse(betterproto2.Message):
    objects: "list[Object]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "BatchGetObjectsResponse", BatchGetObjectsResponse
)


@dataclass(eq=False, repr=False)
class BatchGetTransactionsRequest(betterproto2.Message):
    digests: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Required. The digests of the requested transactions.
    """

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Mask specifying which fields to read.
    If no mask is specified, defaults to `object_id,version,digest`.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "BatchGetTransactionsRequest", BatchGetTransactionsRequest
)


@dataclass(eq=False, repr=False)
class BatchGetTransactionsResponse(betterproto2.Message):
    transactions: "list[ExecutedTransaction]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "BatchGetTransactionsResponse", BatchGetTransactionsResponse
)


@dataclass(eq=False, repr=False)
class Bcs(betterproto2.Message):
    """
    `Bcs` contains an arbitrary type that is serialized using the
    [BCS](https://mystenlabs.github.io/sui-rust-sdk/sui_sdk_types/index.html#bcs)
    format as well as a name that identifies the type of the serialized value.
    """

    name: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Name that identifies the type of the serialized value.
    """

    value: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True
    )
    """
    Bytes of a BCS serialized value.
    """


default_message_pool.register_message("sui.rpc.v2beta", "Bcs", Bcs)


@dataclass(eq=False, repr=False)
class CanceledTransaction(betterproto2.Message):
    """
    A transaction that was canceled.
    """

    digest: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Digest of the canceled transaction.
    """

    version_assignments: "list[VersionAssignment]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of object version assignments.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "CanceledTransaction", CanceledTransaction
)


@dataclass(eq=False, repr=False)
class CanceledTransactions(betterproto2.Message):
    """
    Set of canceled transactions.
    """

    canceled_transactions: "list[CanceledTransaction]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "CanceledTransactions", CanceledTransactions
)


@dataclass(eq=False, repr=False)
class ChangedObject(betterproto2.Message):
    """
    Input/output state of an object that was changed during execution.
    """

    object_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    ID of the object.
    """

    input_state: "ChangedObjectInputObjectState | None" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, optional=True
    )

    input_version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Version of the object before this transaction executed.
    """

    input_digest: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )
    """
    Digest of the object before this transaction executed.
    """

    input_owner: "Owner | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Owner of the object before this transaction executed.
    """

    output_state: "ChangedObjectOutputObjectState | None" = betterproto2.field(
        6, betterproto2.TYPE_ENUM, optional=True
    )

    output_version: "int | None" = betterproto2.field(
        7, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Version of the object after this transaction executed.
    """

    output_digest: "str | None" = betterproto2.field(
        8, betterproto2.TYPE_STRING, optional=True
    )
    """
    Digest of the object after this transaction executed.
    """

    output_owner: "Owner | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Owner of the object after this transaction executed.
    """

    id_operation: "ChangedObjectIdOperation | None" = betterproto2.field(
        10, betterproto2.TYPE_ENUM, optional=True
    )
    """
    What happened to an `ObjectId` during execution.
    """

    object_type: "str | None" = betterproto2.field(
        11, betterproto2.TYPE_STRING, optional=True
    )
    """
    Type information is not provided by the effects structure but is instead
    provided by an indexing layer
    """


default_message_pool.register_message("sui.rpc.v2beta", "ChangedObject", ChangedObject)


@dataclass(eq=False, repr=False)
class ChangeEpoch(betterproto2.Message):
    """
    System transaction used to change the epoch.
    """

    epoch: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT64, optional=True)
    """
    The next (to become) epoch ID.
    """

    protocol_version: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The protocol version in effect in the new epoch.
    """

    storage_charge: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The total amount of gas charged for storage during the epoch.
    """

    computation_charge: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The total amount of gas charged for computation during the epoch.
    """

    storage_rebate: "int | None" = betterproto2.field(
        5, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The amount of storage rebate refunded to the txn senders.
    """

    non_refundable_storage_fee: "int | None" = betterproto2.field(
        6, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The non-refundable storage fee.
    """

    epoch_start_timestamp: "datetime.datetime | None" = betterproto2.field(
        7,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Unix timestamp when epoch started.
    """

    system_packages: "list[SystemPackage]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    System packages (specifically framework and Move stdlib) that are written before the new
    epoch starts. This tracks framework upgrades on chain. When executing the `ChangeEpoch` txn,
    the validator must write out the following modules.  Modules are provided with the version they
    will be upgraded to, their modules in serialized form (which include their package ID), and
    a list of their transitive dependencies.
    """


default_message_pool.register_message("sui.rpc.v2beta", "ChangeEpoch", ChangeEpoch)


@dataclass(eq=False, repr=False)
class Checkpoint(betterproto2.Message):
    sequence_number: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The height of this checkpoint.
    """

    digest: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this Checkpoint's CheckpointSummary.
    """

    summary: "CheckpointSummary | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The `CheckpointSummary` for this checkpoint.
    """

    signature: "ValidatorAggregatedSignature | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    An aggregated quorum signature from the validator committee that
    certified this checkpoint.
    """

    contents: "CheckpointContents | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The `CheckpointContents` for this checkpoint.
    """

    transactions: "list[ExecutedTransaction]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of transactions included in this checkpoint.
    """


default_message_pool.register_message("sui.rpc.v2beta", "Checkpoint", Checkpoint)


@dataclass(eq=False, repr=False)
class CheckpointCommitment(betterproto2.Message):
    """
    A commitment made by a checkpoint.
    """

    kind: "CheckpointCommitmentCheckpointCommitmentKind | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )

    digest: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "CheckpointCommitment", CheckpointCommitment
)


@dataclass(eq=False, repr=False)
class CheckpointContents(betterproto2.Message):
    """
    The committed to contents of a checkpoint.
    """

    bcs: "Bcs | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    This CheckpointContents serialized as BCS.
    """

    digest: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this CheckpointContents.
    """

    version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_INT32, optional=True
    )
    """
    Version of this CheckpointContents
    """

    transactions: "list[CheckpointedTransactionInfo]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of transactions committed to in this checkpoint.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "CheckpointContents", CheckpointContents
)


@dataclass(eq=False, repr=False)
class CheckpointedTransactionInfo(betterproto2.Message):
    """
    Transaction information committed to in a checkpoint.
    """

    transaction: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Digest of the transaction.
    """

    effects: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Digest of the effects.
    """

    signatures: "list[UserSignature]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of user signatures that authorized the transaction.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "CheckpointedTransactionInfo", CheckpointedTransactionInfo
)


@dataclass(eq=False, repr=False)
class CheckpointSummary(betterproto2.Message):
    """
    A header for a checkpoint on the Sui blockchain.

    On the Sui network, checkpoints define the history of the blockchain. They are quite similar to
    the concept of blocks used by other blockchains like Bitcoin or Ethereum. The Sui blockchain,
    however, forms checkpoints after transaction execution has already happened to provide a
    certified history of the chain, instead of being formed before execution.

    Checkpoints commit to a variety of state, including but not limited to:
    - The hash of the previous checkpoint.
    - The set of transaction digests, their corresponding effects digests, as well as the set of
      user signatures that authorized its execution.
    - The objects produced by a transaction.
    - The set of live objects that make up the current state of the chain.
    - On epoch transitions, the next validator committee.

    `CheckpointSummary`s themselves don't directly include all of the previous information but they
    are the top-level type by which all the information is committed to transitively via cryptographic
    hashes included in the summary. `CheckpointSummary`s are signed and certified by a quorum of
    the validator committee in a given epoch to allow verification of the chain's state.
    """

    bcs: "Bcs | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    This CheckpointSummary serialized as BCS.
    """

    digest: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this CheckpointSummary.
    """

    epoch: "int | None" = betterproto2.field(3, betterproto2.TYPE_UINT64, optional=True)
    """
    Epoch that this checkpoint belongs to.
    """

    sequence_number: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The height of this checkpoint.
    """

    total_network_transactions: "int | None" = betterproto2.field(
        5, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Total number of transactions committed since genesis, including those in this
    checkpoint.
    """

    content_digest: "str | None" = betterproto2.field(
        6, betterproto2.TYPE_STRING, optional=True
    )
    """
    The hash of the `CheckpointContents` for this checkpoint.
    """

    previous_digest: "str | None" = betterproto2.field(
        7, betterproto2.TYPE_STRING, optional=True
    )
    """
    The hash of the previous `CheckpointSummary`.

    This will be `None` only for the first, or genesis, checkpoint.
    """

    epoch_rolling_gas_cost_summary: "GasCostSummary | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The running total gas costs of all transactions included in the current epoch so far
    until this checkpoint.
    """

    timestamp: "datetime.datetime | None" = betterproto2.field(
        9,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Timestamp of the checkpoint - number of milliseconds from the Unix epoch
    Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent
    checkpoints can have the same timestamp if they originate from the same underlining consensus commit.
    """

    commitments: "list[CheckpointCommitment]" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Commitments to checkpoint-specific state.
    """

    end_of_epoch_data: "EndOfEpochData | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Extra data only present in the final checkpoint of an epoch.
    """

    version_specific_data: "bytes | None" = betterproto2.field(
        12, betterproto2.TYPE_BYTES, optional=True
    )
    """
    `CheckpointSummary` is not an evolvable structure - it must be readable by any version of
    the code. Therefore, to allow extensions to be added to `CheckpointSummary`,
    opaque data can be added to checkpoints, which can be deserialized based on the current
    protocol version.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "CheckpointSummary", CheckpointSummary
)


@dataclass(eq=False, repr=False)
class CircomG1(betterproto2.Message):
    """
    A G1 point.
    """

    e0: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    base10 encoded Bn254FieldElement
    """

    e1: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True)
    """
    base10 encoded Bn254FieldElement
    """

    e2: "str | None" = betterproto2.field(3, betterproto2.TYPE_STRING, optional=True)
    """
    base10 encoded Bn254FieldElement
    """


default_message_pool.register_message("sui.rpc.v2beta", "CircomG1", CircomG1)


@dataclass(eq=False, repr=False)
class CircomG2(betterproto2.Message):
    """
    A G2 point.
    """

    e00: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    base10 encoded Bn254FieldElement
    """

    e01: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True)
    """
    base10 encoded Bn254FieldElement
    """

    e10: "str | None" = betterproto2.field(3, betterproto2.TYPE_STRING, optional=True)
    """
    base10 encoded Bn254FieldElement
    """

    e11: "str | None" = betterproto2.field(4, betterproto2.TYPE_STRING, optional=True)
    """
    base10 encoded Bn254FieldElement
    """

    e20: "str | None" = betterproto2.field(5, betterproto2.TYPE_STRING, optional=True)
    """
    base10 encoded Bn254FieldElement
    """

    e21: "str | None" = betterproto2.field(6, betterproto2.TYPE_STRING, optional=True)
    """
    base10 encoded Bn254FieldElement
    """


default_message_pool.register_message("sui.rpc.v2beta", "CircomG2", CircomG2)


@dataclass(eq=False, repr=False)
class Command(betterproto2.Message):
    """
    A single command in a programmable transaction.

    Oneofs:
        - command:
    """

    move_call: "MoveCall | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="command"
    )
    """
    A call to either an entry or a public Move function.
    """

    transfer_objects: "TransferObjects | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="command"
    )
    """
    `(Vec<forall T:key+store. T>, address)`
    It sends n-objects to the specified address. These objects must have store
    (public transfer) and either the previous owner must be an address or the object must
    be newly created.
    """

    split_coins: "SplitCoins | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="command"
    )
    """
    `(&mut Coin<T>, Vec<u64>)` -> `Vec<Coin<T>>`
    It splits off some amounts into new coins with those amounts.
    """

    merge_coins: "MergeCoins | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="command"
    )
    """
    `(&mut Coin<T>, Vec<Coin<T>>)`
    It merges n-coins into the first coin.
    """

    publish: "Publish | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="command"
    )
    """
    Publishes a Move package. It takes the package bytes and a list of the package's transitive
    dependencies to link against on chain.
    """

    make_move_vector: "MakeMoveVector | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="command"
    )
    """
    `forall T: Vec<T> -> vector<T>`
    Given n-values of the same type, it constructs a vector. For non-objects or an empty vector,
    the type tag must be specified.
    """

    upgrade: "Upgrade | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True, group="command"
    )
    """
    Upgrades a Move package.
    Takes (in order):
    1. A vector of serialized modules for the package.
    2. A vector of object ids for the transitive dependencies of the new package.
    3. The object ID of the package being upgraded.
    4. An argument holding the `UpgradeTicket` that must have been produced from an earlier command in the same
       programmable transaction.
    """


default_message_pool.register_message("sui.rpc.v2beta", "Command", Command)


@dataclass(eq=False, repr=False)
class CommandArgumentError(betterproto2.Message):
    """
    An error with an argument to a command.
    """

    argument: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Position of the problematic argument.
    """

    kind: "CommandArgumentErrorCommandArgumentErrorKind | None" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, optional=True
    )

    index: "int | None" = betterproto2.field(3, betterproto2.TYPE_UINT32, optional=True)
    """
    Index of an input or result.
    """

    subresult: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Index of a subresult.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "CommandArgumentError", CommandArgumentError
)


@dataclass(eq=False, repr=False)
class ConsensusCommitPrologue(betterproto2.Message):
    """
    Consensus commit prologue system transaction.

    This message can represent V1, V2, and V3 prologue types.
    """

    epoch: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT64, optional=True)
    """
    Epoch of the commit prologue transaction.

    Present in V1, V2, V3, V4.
    """

    round: "int | None" = betterproto2.field(2, betterproto2.TYPE_UINT64, optional=True)
    """
    Consensus round of the commit.

    Present in V1, V2, V3, V4.
    """

    commit_timestamp: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Unix timestamp from consensus.

    Present in V1, V2, V3, V4.
    """

    consensus_commit_digest: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )
    """
    Digest of consensus output.

    Present in V2, V3, V4.
    """

    sub_dag_index: "int | None" = betterproto2.field(
        5, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The sub DAG index of the consensus commit. This field is populated if there
    are multiple consensus commits per round.

    Present in V3, V4.
    """

    consensus_determined_version_assignments: "ConsensusDeterminedVersionAssignments | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Stores consensus handler determined shared object version assignments.

    Present in V3, V4.
    """

    additional_state_digest: "str | None" = betterproto2.field(
        7, betterproto2.TYPE_STRING, optional=True
    )
    """
    Digest of any additional state computed by the consensus handler.
    Used to detect forking bugs as early as possible.

    Present in V4.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ConsensusCommitPrologue", ConsensusCommitPrologue
)


@dataclass(eq=False, repr=False)
class ConsensusDeterminedVersionAssignments(betterproto2.Message):
    """
    Version assignments performed by consensus.

    Oneofs:
        - kind:
    """

    canceled_transactions: "CanceledTransactions | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Canceled transaction version assignment.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta",
    "ConsensusDeterminedVersionAssignments",
    ConsensusDeterminedVersionAssignments,
)


@dataclass(eq=False, repr=False)
class EndOfEpochData(betterproto2.Message):
    """
    Data, which when included in a `CheckpointSummary`, signals the end of an `Epoch`.
    """

    next_epoch_committee: "list[ValidatorCommitteeMember]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The set of validators that will be in the `ValidatorCommittee` for the next epoch.
    """

    next_epoch_protocol_version: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The protocol version that is in effect during the next epoch.
    """

    epoch_commitments: "list[CheckpointCommitment]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Commitments to epoch specific state (live object set)
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "EndOfEpochData", EndOfEpochData
)


@dataclass(eq=False, repr=False)
class EndOfEpochTransaction(betterproto2.Message):
    """
    Set of operations run at the end of the epoch to close out the current epoch
    and start the next one.
    """

    transactions: "list[EndOfEpochTransactionKind]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "EndOfEpochTransaction", EndOfEpochTransaction
)


@dataclass(eq=False, repr=False)
class EndOfEpochTransactionKind(betterproto2.Message):
    """
    Operation run at the end of an epoch.

    Oneofs:
        - kind:
    """

    change_epoch: "ChangeEpoch | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    End the epoch and start the next one.
    """

    authenticator_state_expire: "AuthenticatorStateExpire | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Expire JWKs used for zklogin.
    """

    execution_time_observations: "ExecutionTimeObservations | None" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True, group="kind")
    )
    """
    Execution time observations from the committee to preserve cross epoch
    """

    authenticator_state_create: "___google__protobuf__.Empty | None" = (
        betterproto2.field(200, betterproto2.TYPE_MESSAGE, optional=True, group="kind")
    )
    """
    Use higher field numbers for kinds which happen infrequently.

    Create and initialize the authenticator object used for zklogin.
    """

    randomness_state_create: "___google__protobuf__.Empty | None" = betterproto2.field(
        201, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Create and initialize the randomness object.
    """

    deny_list_state_create: "___google__protobuf__.Empty | None" = betterproto2.field(
        202, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Create and initialize the deny list object.
    """

    bridge_state_create: "str | None" = betterproto2.field(
        203, betterproto2.TYPE_STRING, optional=True, group="kind"
    )
    """
    Create and initialize the bridge object.
    """

    bridge_committee_init: "int | None" = betterproto2.field(
        204, betterproto2.TYPE_UINT64, optional=True, group="kind"
    )
    """
    Initialize the bridge committee.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "EndOfEpochTransactionKind", EndOfEpochTransactionKind
)


@dataclass(eq=False, repr=False)
class Epoch(betterproto2.Message):
    epoch: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT64, optional=True)

    committee: "ValidatorCommittee | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The committee governing this epoch.
    """

    first_checkpoint: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Also want a way to get validator metadata for validators (eg network keys)
    optional ValidatorSet validator_set = 3;
    """

    last_checkpoint: "int | None" = betterproto2.field(
        5, betterproto2.TYPE_UINT64, optional=True
    )

    start: "datetime.datetime | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )

    end: "datetime.datetime | None" = betterproto2.field(
        7,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )

    reference_gas_price: "int | None" = betterproto2.field(
        8, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Reference gas price denominated in MIST
    """

    protocol_config: "ProtocolConfig | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("sui.rpc.v2beta", "Epoch", Epoch)


@dataclass(eq=False, repr=False)
class Event(betterproto2.Message):
    """
    An event.
    """

    package_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Package ID of the top-level function invoked by a `MoveCall` command that triggered this
    event to be emitted.
    """

    module: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Module name of the top-level function invoked by a `MoveCall` command that triggered this
    event to be emitted.
    """

    sender: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    Address of the account that sent the transaction where this event was emitted.
    """

    event_type: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )
    """
    The type of the event emitted.
    """

    contents: "Bcs | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    BCS serialized bytes of the event.
    """

    json: "___google__protobuf__.Value | None" = betterproto2.field(
        100, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    JSON rendering of the event.
    """


default_message_pool.register_message("sui.rpc.v2beta", "Event", Event)


@dataclass(eq=False, repr=False)
class ExecutedTransaction(betterproto2.Message):
    digest: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this Transaction.
    """

    transaction: "Transaction | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The transaction itself.
    """

    signatures: "list[UserSignature]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of user signatures that are used to authorize the
    execution of this transaction.
    """

    effects: "TransactionEffects | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The `TransactionEffects` for this transaction.
    """

    events: "TransactionEvents | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The `TransactionEvents` for this transaction.

    This field might be empty, even if it was explicitly requested, if the
    transaction didn't produce any events.
    `sui.types.TransactionEffects.events_digest` is populated if the
    transaction produced any events.
    """

    checkpoint: "int | None" = betterproto2.field(
        6, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The sequence number for the checkpoint that includes this transaction.
    """

    timestamp: "datetime.datetime | None" = betterproto2.field(
        7,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The Unix timestamp of the checkpoint that includes this transaction.
    """

    balance_changes: "list[BalanceChange]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )

    input_objects: "list[Object]" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of input objects used during the execution of this transaction.
    """

    output_objects: "list[Object]" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of output objects produced from the execution of this transaction.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ExecutedTransaction", ExecutedTransaction
)


@dataclass(eq=False, repr=False)
class ExecuteTransactionRequest(betterproto2.Message):
    transaction: "Transaction | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The transaction to execute.
    """

    signatures: "list[UserSignature]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of `UserSiganture`s authorizing the execution of the provided
    transaction.
    """

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Mask specifying which fields to read.
    If no mask is specified, defaults to `finality`.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ExecuteTransactionRequest", ExecuteTransactionRequest
)


@dataclass(eq=False, repr=False)
class ExecuteTransactionResponse(betterproto2.Message):
    """
    Response message for `NodeService.ExecuteTransaction`.
    """

    finality: "TransactionFinality | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Indicates the finality of the executed transaction.
    """

    transaction: "ExecutedTransaction | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "ExecuteTransactionResponse", ExecuteTransactionResponse
)


@dataclass(eq=False, repr=False)
class ExecutionError(betterproto2.Message):
    """
    An error that can occur during the execution of a transaction.
    """

    command: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The command, if any, during which the error occurred.
    """

    kind: "ExecutionErrorExecutionErrorKind | None" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, optional=True
    )

    abort_code: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )
    """
    TODO figure out how clever errors fit in before this graduates from beta

    Abort code from Move.
    """

    location: "MoveLocation | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Location in Move where the error occurred.
    """

    size_error: "SizeError | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )

    command_argument_error: "CommandArgumentError | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    type_argument_error: "TypeArgumentError | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )

    package_upgrade_error: "PackageUpgradeError | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )

    index: "int | None" = betterproto2.field(9, betterproto2.TYPE_UINT32, optional=True)
    """
    Index of an input or result.
    """

    subresult: "int | None" = betterproto2.field(
        10, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Index of a subresult.
    """

    object_id: "str | None" = betterproto2.field(
        11, betterproto2.TYPE_STRING, optional=True
    )

    address: "str | None" = betterproto2.field(
        12, betterproto2.TYPE_STRING, optional=True
    )
    """
    Denied address.
    """

    coin_type: "str | None" = betterproto2.field(
        13, betterproto2.TYPE_STRING, optional=True
    )
    """
    Coin type.
    """

    congested_objects: "list[str]" = betterproto2.field(
        14, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Set of objects that were congested, leading to the transaction's cancellation.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ExecutionError", ExecutionError
)


@dataclass(eq=False, repr=False)
class ExecutionStatus(betterproto2.Message):
    """
    The status of an executed transaction.
    """

    success: "bool | None" = betterproto2.field(
        1, betterproto2.TYPE_BOOL, optional=True
    )
    """
    Indicates if the transaction was successful or not.
    """

    error: "ExecutionError | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The error if `success` is false.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ExecutionStatus", ExecutionStatus
)


@dataclass(eq=False, repr=False)
class ExecutionTimeObservation(betterproto2.Message):
    kind: "ExecutionTimeObservationExecutionTimeObservationKind | None" = (
        betterproto2.field(1, betterproto2.TYPE_ENUM, optional=True)
    )

    move_entry_point: "MoveCall | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    validator_observations: "list[ValidatorExecutionTimeObservation]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "ExecutionTimeObservation", ExecutionTimeObservation
)


@dataclass(eq=False, repr=False)
class ExecutionTimeObservations(betterproto2.Message):
    version: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_INT32, optional=True
    )
    """
    Version of this ExecutionTimeObservations
    """

    observations: "list[ExecutionTimeObservation]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "ExecutionTimeObservations", ExecutionTimeObservations
)


@dataclass(eq=False, repr=False)
class GasCostSummary(betterproto2.Message):
    """
    Summary of gas charges.
    """

    computation_cost: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Cost of computation/execution.
    """

    storage_cost: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Storage cost, it's the sum of all storage cost for all objects created or mutated.
    """

    storage_rebate: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The amount of storage cost refunded to the user for all objects deleted or mutated in the
    transaction.
    """

    non_refundable_storage_fee: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The fee for the rebate. The portion of the storage rebate kept by the system.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "GasCostSummary", GasCostSummary
)


@dataclass(eq=False, repr=False)
class GasPayment(betterproto2.Message):
    """
    Payment information for executing a transaction.
    """

    objects: "list[ObjectReference]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of gas objects to use for payment.
    """

    owner: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True)
    """
    Owner of the gas objects, either the transaction sender or a sponsor.
    """

    price: "int | None" = betterproto2.field(3, betterproto2.TYPE_UINT64, optional=True)
    """
    Gas unit price to use when charging for computation.

    Must be greater than or equal to the network's current RGP (reference gas price).
    """

    budget: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Total budget willing to spend for the execution of a transaction.
    """


default_message_pool.register_message("sui.rpc.v2beta", "GasPayment", GasPayment)


@dataclass(eq=False, repr=False)
class GenesisTransaction(betterproto2.Message):
    """
    The genesis transaction.
    """

    objects: "list[Object]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of genesis objects.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "GenesisTransaction", GenesisTransaction
)


@dataclass(eq=False, repr=False)
class GetCheckpointRequest(betterproto2.Message):
    """


    Oneofs:
        - checkpoint_id: If neither is provided, return the latest
    """

    sequence_number: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, optional=True, group="checkpoint_id"
    )
    """
    The sequence number of the requested checkpoint.
    """

    digest: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="checkpoint_id"
    )
    """
    The digest of the requested checkpoint.
    """

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Mask specifying which fields to read.
    If no mask is specified, defaults to `object_id,version,digest`.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "GetCheckpointRequest", GetCheckpointRequest
)


@dataclass(eq=False, repr=False)
class GetEpochRequest(betterproto2.Message):
    """
    message BatchGetCheckpointsRequest {
      repeated GetCheckpointRequest requests = 1;

      // Mask specifying which fields to read.
      // If no mask is specified, defaults to `object_id,version,digest`.
      optional google.protobuf.FieldMask read_mask = 2;
    }

    message BatchGetCheckpointsResponse {
      repeated Checkpoint checkpoints = 1;
    }
    """

    epoch: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT64, optional=True)
    """
    The requested epoch.
    If no epoch is provided the current epoch will be returned.
    """

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Mask specifying which fields to read.
    If no mask is specified, defaults to `epoch`.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "GetEpochRequest", GetEpochRequest
)


@dataclass(eq=False, repr=False)
class GetObjectRequest(betterproto2.Message):
    object_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The `ObjectId` of the requested object.
    """

    version: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Request a specific version of the object.
    If no version is specified, and the object is live, then the latest
    version of the object is returned.
    """

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Mask specifying which fields to read.
    If no mask is specified, defaults to `object_id,version,digest`.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "GetObjectRequest", GetObjectRequest
)


@dataclass(eq=False, repr=False)
class GetServiceInfoRequest(betterproto2.Message):
    pass


default_message_pool.register_message(
    "sui.rpc.v2beta", "GetServiceInfoRequest", GetServiceInfoRequest
)


@dataclass(eq=False, repr=False)
class GetServiceInfoResponse(betterproto2.Message):
    chain_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The chain identifier of the chain that this node is on.

    The chain identifier is the digest of the genesis checkpoint, the
    checkpoint with sequence number 0.
    """

    chain: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True)
    """
    Human-readable name of the chain that this node is on.

    This is intended to be a human-readable name like `mainnet`, `testnet`, and so on.
    """

    epoch: "int | None" = betterproto2.field(3, betterproto2.TYPE_UINT64, optional=True)
    """
    Current epoch of the node based on its highest executed checkpoint.
    """

    checkpoint_height: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Checkpoint height of the most recently executed checkpoint.
    """

    timestamp: "datetime.datetime | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Unix timestamp of the most recently executed checkpoint.
    """

    lowest_available_checkpoint: "int | None" = betterproto2.field(
        6, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The lowest checkpoint for which checkpoints and transaction data are available.
    """

    lowest_available_checkpoint_objects: "int | None" = betterproto2.field(
        7, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The lowest checkpoint for which object data is available.
    """

    server_version: "str | None" = betterproto2.field(
        8, betterproto2.TYPE_STRING, optional=True
    )
    """
    Software version of the service. Similar to the `server` http header.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "GetServiceInfoResponse", GetServiceInfoResponse
)


@dataclass(eq=False, repr=False)
class GetTransactionRequest(betterproto2.Message):
    digest: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Required. The digest of the requested transaction.
    """

    read_mask: "___google__protobuf__.FieldMask | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Mask specifying which fields to read.
    If no mask is specified, defaults to `digest`.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "GetTransactionRequest", GetTransactionRequest
)


@dataclass(eq=False, repr=False)
class Input(betterproto2.Message):
    """
    An input to a user transaction.
    """

    kind: "InputInputKind | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )

    pure: "bytes | None" = betterproto2.field(2, betterproto2.TYPE_BYTES, optional=True)
    """
    A move value serialized as BCS.

    For normal operations this is required to be a move primitive type and not contain structs
    or objects.
    """

    object_id: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    `ObjectId` of the object input.
    """

    version: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Requested version of the input object when `kind` is `IMMUTABLE_OR_OWNED`
    or `RECEIVING` or if `kind` is `SHARED` this is the initial version of the
    object when it was shared
    """

    digest: "str | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this object.
    """

    mutable: "bool | None" = betterproto2.field(
        6, betterproto2.TYPE_BOOL, optional=True
    )
    """
    Controls whether the caller asks for a mutable reference to the shared
    object.
    """

    literal: "___google__protobuf__.Value | None" = betterproto2.field(
        1000, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A literal value

    INPUT ONLY
    """


default_message_pool.register_message("sui.rpc.v2beta", "Input", Input)


@dataclass(eq=False, repr=False)
class Jwk(betterproto2.Message):
    """
    A JSON web key.

    Struct that contains info for a JWK. A list of them for different kinds can
    be retrieved from the JWK endpoint (for example, <https://www.googleapis.com/oauth2/v3/certs>).
    The JWK is used to verify the JWT token.
    """

    kty: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Key type parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.1.
    """

    e: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True)
    """
    RSA public exponent, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3.
    """

    n: "str | None" = betterproto2.field(3, betterproto2.TYPE_STRING, optional=True)
    """
    RSA modulus, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3.
    """

    alg: "str | None" = betterproto2.field(4, betterproto2.TYPE_STRING, optional=True)
    """
    Algorithm parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.4.
    """


default_message_pool.register_message("sui.rpc.v2beta", "Jwk", Jwk)


@dataclass(eq=False, repr=False)
class JwkId(betterproto2.Message):
    """
    Key to uniquely identify a JWK.
    """

    iss: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    The issuer or identity of the OIDC provider.
    """

    kid: "str | None" = betterproto2.field(2, betterproto2.TYPE_STRING, optional=True)
    """
    A key ID used to uniquely identify a key from an OIDC provider.
    """


default_message_pool.register_message("sui.rpc.v2beta", "JwkId", JwkId)


@dataclass(eq=False, repr=False)
class MakeMoveVector(betterproto2.Message):
    """
    Command to build a Move vector out of a set of individual elements.
    """

    element_type: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    Type of the individual elements.

    This is required to be set when the type can't be inferred, for example when the set of
    provided arguments are all pure input values.
    """

    elements: "list[Argument]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The set individual elements to build the vector with.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "MakeMoveVector", MakeMoveVector
)


@dataclass(eq=False, repr=False)
class MergeCoins(betterproto2.Message):
    """
    Command to merge multiple coins of the same type into a single coin.
    """

    coin: "Argument | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Coin to merge coins into.
    """

    coins_to_merge: "list[Argument]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of coins to merge into `coin`.

    All listed coins must be of the same type and be the same type as `coin`
    """


default_message_pool.register_message("sui.rpc.v2beta", "MergeCoins", MergeCoins)


@dataclass(eq=False, repr=False)
class MoveCall(betterproto2.Message):
    """
    Command to call a Move function.

    Functions that can be called by a `MoveCall` command are those that have a function signature
    that is either `entry` or `public` (which don't have a reference return type).
    """

    package: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The package containing the module and function.
    """

    module: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The specific module in the package containing the function.
    """

    function: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    The function to be called.
    """

    type_arguments: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )
    """
    The type arguments to the function.
    """

    arguments: "list[Argument]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The arguments to the function.
    """


default_message_pool.register_message("sui.rpc.v2beta", "MoveCall", MoveCall)


@dataclass(eq=False, repr=False)
class MoveLocation(betterproto2.Message):
    """
    Location in Move bytecode where an error occurred.
    """

    package: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The package ID.
    """

    module: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The module name.
    """

    function: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT32, optional=True
    )
    """
    The function index.
    """

    instruction: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Offset of the instruction where the error occurred.
    """

    function_name: "str | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True
    )
    """
    The name of the function, if available.
    """


default_message_pool.register_message("sui.rpc.v2beta", "MoveLocation", MoveLocation)


@dataclass(eq=False, repr=False)
class MoveModule(betterproto2.Message):
    """
    Module defined by a package.
    """

    name: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)
    """
    Name of the module.
    """

    contents: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True
    )
    """
    Serialized bytecode of the module.
    """


default_message_pool.register_message("sui.rpc.v2beta", "MoveModule", MoveModule)


@dataclass(eq=False, repr=False)
class MultisigAggregatedSignature(betterproto2.Message):
    """
    Aggregated signature from members of a multisig committee.
    """

    signatures: "list[MultisigMemberSignature]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The plain signatures encoded with signature scheme.

    The signatures must be in the same order as they are listed in the committee.
    """

    bitmap: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Bitmap indicating which committee members contributed to the
    signature.
    """

    legacy_bitmap: "list[int]" = betterproto2.field(
        3, betterproto2.TYPE_UINT32, repeated=True
    )
    """
    If present, means this signature's on-chain format uses the old
    legacy multisig format.
    """

    committee: "MultisigCommittee | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The committee to use to validate this signature.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "MultisigAggregatedSignature", MultisigAggregatedSignature
)


@dataclass(eq=False, repr=False)
class MultisigCommittee(betterproto2.Message):
    """
    A multisig committee.
    """

    members: "list[MultisigMember]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of committee members and their corresponding weight.
    """

    threshold: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    The threshold of signatures needed to validate a signature from
    this committee.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "MultisigCommittee", MultisigCommittee
)


@dataclass(eq=False, repr=False)
class MultisigMember(betterproto2.Message):
    """
    A member in a multisig committee.
    """

    public_key: "MultisigMemberPublicKey | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The public key of the committee member.
    """

    weight: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )
    """
    The weight of this member's signature.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "MultisigMember", MultisigMember
)


@dataclass(eq=False, repr=False)
class MultisigMemberPublicKey(betterproto2.Message):
    """
    Set of valid public keys for multisig committee members.
    """

    scheme: "SignatureScheme | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )
    """
    The signature scheme of this public key.
    """

    public_key: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True
    )
    """
    Public key bytes if scheme is ed25519 | secp256k1 | secp256r1.
    """

    zklogin: "ZkLoginPublicIdentifier | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A zklogin public identifier if scheme is zklogin.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "MultisigMemberPublicKey", MultisigMemberPublicKey
)


@dataclass(eq=False, repr=False)
class MultisigMemberSignature(betterproto2.Message):
    """
    A signature from a member of a multisig committee.
    """

    scheme: "SignatureScheme | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )
    """
    The signature scheme of this signature.
    """

    signature: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True
    )
    """
    Signature bytes if scheme is ed25519 | secp256k1 | secp256r1.
    """

    zklogin: "ZkLoginAuthenticator | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The zklogin authenticator if scheme is `ZKLOGIN`.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "MultisigMemberSignature", MultisigMemberSignature
)


@dataclass(eq=False, repr=False)
class Object(betterproto2.Message):
    """
    An object on the Sui blockchain.
    """

    bcs: "Bcs | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    This Object serialized as BCS.
    """

    object_id: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    `ObjectId` for this object.
    """

    version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Version of the object.
    """

    digest: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this Object.
    """

    owner: "Owner | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Owner of the object.
    """

    object_type: "str | None" = betterproto2.field(
        6, betterproto2.TYPE_STRING, optional=True
    )
    """
    The type of this object.

    This will be 'package' for packages and a StructTag for move structs.
    """

    has_public_transfer: "bool | None" = betterproto2.field(
        7, betterproto2.TYPE_BOOL, optional=True
    )
    """
    DEPRECATED this field is no longer used to determine whether a tx can transfer this
    object. Instead, it is always calculated from the objects type when loaded in execution.

    Only set for Move structs
    """

    contents: "Bcs | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    BCS bytes of a Move struct value.

    Only set for Move structs
    """

    modules: "list[MoveModule]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of modules defined by this package.

    Only set for Packages
    """

    type_origin_table: "list[TypeOrigin]" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Maps struct/module to a package version where it was first defined, stored as a vector for
    simple serialization and deserialization.

    Only set for Packages
    """

    linkage_table: "list[UpgradeInfo]" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    For each dependency, maps original package ID to the info about the (upgraded) dependency
    version that this package is using.

    Only set for Packages
    """

    previous_transaction: "str | None" = betterproto2.field(
        12, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of the transaction that created or last mutated this object
    """

    storage_rebate: "int | None" = betterproto2.field(
        13, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The amount of SUI to rebate if this object gets deleted.
    This number is re-calculated each time the object is mutated based on
    the present storage gas price.
    """

    json: "___google__protobuf__.Value | None" = betterproto2.field(
        100, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    JSON rendering of the object.
    """


default_message_pool.register_message("sui.rpc.v2beta", "Object", Object)


@dataclass(eq=False, repr=False)
class ObjectReference(betterproto2.Message):
    """
    Reference to an object.
    """

    object_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    The object ID of this object.
    """

    version: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The version of this object.
    """

    digest: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this object.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ObjectReference", ObjectReference
)


@dataclass(eq=False, repr=False)
class Owner(betterproto2.Message):
    """
    Enum of different types of ownership for an object.
    """

    kind: "OwnerOwnerKind | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )

    address: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Address or ObjectId of the owner
    """

    version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )


default_message_pool.register_message("sui.rpc.v2beta", "Owner", Owner)


@dataclass(eq=False, repr=False)
class PackageUpgradeError(betterproto2.Message):
    """
    An error with upgrading a package.
    """

    kind: "PackageUpgradeErrorPackageUpgradeErrorKind | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )

    package_id: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The Package Id.
    """

    digest: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    A digest.
    """

    policy: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT32, optional=True
    )
    """
    The policy.
    """

    ticket_id: "str | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True
    )
    """
    The ticket Id.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "PackageUpgradeError", PackageUpgradeError
)


@dataclass(eq=False, repr=False)
class PasskeyAuthenticator(betterproto2.Message):
    """
    A passkey authenticator.

    See
    [struct.PasskeyAuthenticator](https://mystenlabs.github.io/sui-rust-sdk/sui_sdk_types/struct.PasskeyAuthenticator.html#bcs)
    for more information on the requirements on the shape of the
    `client_data_json` field.
    """

    authenticator_data: "bytes | None" = betterproto2.field(
        1, betterproto2.TYPE_BYTES, optional=True
    )
    """
    Opaque authenticator data for this passkey signature.

    See [Authenticator Data](https://www.w3.org/TR/webauthn-2/#sctn-authenticator-data) for
    more information on this field.
    """

    client_data_json: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    Structured, unparsed, JSON for this passkey signature.

    See [CollectedClientData](https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata)
    for more information on this field.
    """

    signature: "UserSignature | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A secp256r1 signature.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "PasskeyAuthenticator", PasskeyAuthenticator
)


@dataclass(eq=False, repr=False)
class ProgrammableTransaction(betterproto2.Message):
    """
    A user transaction.

    Contains a series of native commands and Move calls where the results of one command can be
    used in future commands.
    """

    inputs: "list[Input]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Input objects or primitive values.
    """

    commands: "list[Command]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The commands to be executed sequentially. A failure in any command
    results in the failure of the entire transaction.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ProgrammableTransaction", ProgrammableTransaction
)


@dataclass(eq=False, repr=False)
class ProtocolConfig(betterproto2.Message):
    protocol_version: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, optional=True
    )

    feature_flags: "dict[str, bool]" = betterproto2.field(
        2,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_BOOL
        ),
    )

    attributes: "dict[str, str]" = betterproto2.field(
        3,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "ProtocolConfig", ProtocolConfig
)


@dataclass(eq=False, repr=False)
class Publish(betterproto2.Message):
    """
    Command to publish a new Move package.
    """

    modules: "list[bytes]" = betterproto2.field(
        1, betterproto2.TYPE_BYTES, repeated=True
    )
    """
    The serialized Move modules.
    """

    dependencies: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Set of packages that the to-be published package depends on.
    """


default_message_pool.register_message("sui.rpc.v2beta", "Publish", Publish)


@dataclass(eq=False, repr=False)
class RandomnessStateUpdate(betterproto2.Message):
    """
    Randomness update.
    """

    epoch: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT64, optional=True)
    """
    Epoch of the randomness state update transaction.
    """

    randomness_round: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Randomness round of the update.
    """

    random_bytes: "bytes | None" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, optional=True
    )
    """
    Updated random bytes.
    """

    randomness_object_initial_shared_version: "int | None" = betterproto2.field(
        4, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The initial version of the randomness object that it was shared at.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "RandomnessStateUpdate", RandomnessStateUpdate
)


@dataclass(eq=False, repr=False)
class SizeError(betterproto2.Message):
    """
    A size error.
    """

    size: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT64, optional=True)
    """
    The offending size.
    """

    max_size: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The maximum allowable size.
    """


default_message_pool.register_message("sui.rpc.v2beta", "SizeError", SizeError)


@dataclass(eq=False, repr=False)
class SplitCoins(betterproto2.Message):
    """
    Command to split a single coin object into multiple coins.
    """

    coin: "Argument | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The coin to split.
    """

    amounts: "list[Argument]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The amounts to split off.
    """


default_message_pool.register_message("sui.rpc.v2beta", "SplitCoins", SplitCoins)


@dataclass(eq=False, repr=False)
class SystemPackage(betterproto2.Message):
    """
    System package.
    """

    version: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Version of the package.
    """

    modules: "list[bytes]" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, repeated=True
    )
    """
    Move modules.
    """

    dependencies: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Package dependencies.
    """


default_message_pool.register_message("sui.rpc.v2beta", "SystemPackage", SystemPackage)


@dataclass(eq=False, repr=False)
class Transaction(betterproto2.Message):
    """
    A transaction.
    """

    bcs: "Bcs | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    This Transaction serialized as BCS.
    """

    digest: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this Transaction.
    """

    version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_INT32, optional=True
    )
    """
    Version of this Transaction.
    """

    kind: "TransactionKind | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    sender: "str | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True
    )

    gas_payment: "GasPayment | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    expiration: "TransactionExpiration | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("sui.rpc.v2beta", "Transaction", Transaction)


@dataclass(eq=False, repr=False)
class TransactionEffects(betterproto2.Message):
    """
    The effects of executing a transaction.
    """

    bcs: "Bcs | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    This TransactionEffects serialized as BCS.
    """

    digest: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this TransactionEffects.
    """

    version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_INT32, optional=True
    )
    """
    Version of this TransactionEffects.
    """

    status: "ExecutionStatus | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The status of the execution.
    """

    epoch: "int | None" = betterproto2.field(5, betterproto2.TYPE_UINT64, optional=True)
    """
    The epoch when this transaction was executed.
    """

    gas_used: "GasCostSummary | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The gas used by this transaction.
    """

    transaction_digest: "str | None" = betterproto2.field(
        7, betterproto2.TYPE_STRING, optional=True
    )
    """
    The transaction digest.
    """

    gas_object: "ChangedObject | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Information about the gas object. Also present in the `changed_objects` vector.

    System transaction that don't require gas will leave this as `None`.
    """

    events_digest: "str | None" = betterproto2.field(
        9, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of the events emitted during execution,
    can be `None` if the transaction does not emit any event.
    """

    dependencies: "list[str]" = betterproto2.field(
        10, betterproto2.TYPE_STRING, repeated=True
    )
    """
    The set of transaction digests this transaction depends on.
    """

    lamport_version: "int | None" = betterproto2.field(
        11, betterproto2.TYPE_UINT64, optional=True
    )
    """
    The version number of all the written objects (excluding packages) by this transaction.
    """

    changed_objects: "list[ChangedObject]" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Objects whose state are changed by this transaction.
    """

    unchanged_shared_objects: "list[UnchangedSharedObject]" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Shared objects that are not mutated in this transaction. Unlike owned objects,
    read-only shared objects' version are not committed in the transaction,
    and in order for a node to catch up and execute it without consensus sequencing,
    the version needs to be committed in the effects.
    """

    auxiliary_data_digest: "str | None" = betterproto2.field(
        14, betterproto2.TYPE_STRING, optional=True
    )
    """
    Auxiliary data that are not protocol-critical, generated as part of the effects but are stored separately.
    Storing it separately allows us to avoid bloating the effects with data that are not critical.
    It also provides more flexibility on the format and type of the data.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "TransactionEffects", TransactionEffects
)


@dataclass(eq=False, repr=False)
class TransactionEvents(betterproto2.Message):
    """
    Events emitted during the successful execution of a transaction.
    """

    bcs: "Bcs | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    This TransactionEvents serialized as BCS.
    """

    digest: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    The digest of this TransactionEvents.
    """

    events: "list[Event]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of events emitted by a transaction.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "TransactionEvents", TransactionEvents
)


@dataclass(eq=False, repr=False)
class TransactionExpiration(betterproto2.Message):
    """
    A TTL for a transaction.
    """

    kind: "TransactionExpirationTransactionExpirationKind | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )

    epoch: "int | None" = betterproto2.field(2, betterproto2.TYPE_UINT64, optional=True)


default_message_pool.register_message(
    "sui.rpc.v2beta", "TransactionExpiration", TransactionExpiration
)


@dataclass(eq=False, repr=False)
class TransactionFinality(betterproto2.Message):
    """
    Indicates the finality of the executed transaction.

    Oneofs:
        - finality:
    """

    certified: "ValidatorAggregatedSignature | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="finality"
    )
    """
    A quorum certificate certifying that a transaction is final but might not
    be included in a checkpoint yet.
    """

    checkpointed: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True, group="finality"
    )
    """
    Sequence number of the checkpoint that includes the transaction.
    """

    quorum_executed: "___google__protobuf__.Empty | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="finality"
    )
    """
    Indicates that a quorum of validators has executed the transaction but
    that it might not be included in a checkpoint yet.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "TransactionFinality", TransactionFinality
)


@dataclass(eq=False, repr=False)
class TransactionKind(betterproto2.Message):
    """
    Transaction type.

    Oneofs:
        - kind:
    """

    programmable_transaction: "ProgrammableTransaction | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    A user transaction comprised of a list of native commands and Move calls.
    """

    change_epoch: "ChangeEpoch | None" = betterproto2.field(
        100, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    System Transactions

    System transaction used to end an epoch.

    The `ChangeEpoch` variant is now deprecated (but the `ChangeEpoch` struct is still used by
    `EndOfEpochTransaction`).
    """

    genesis: "GenesisTransaction | None" = betterproto2.field(
        101, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Transaction used to initialize the chain state.

    Only valid if in the genesis checkpoint (0) and if this is the very first transaction ever
    executed on the chain.
    """

    consensus_commit_prologue_v1: "ConsensusCommitPrologue | None" = betterproto2.field(
        102, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    V1 consensus commit update.
    """

    authenticator_state_update: "AuthenticatorStateUpdate | None" = betterproto2.field(
        103, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Update set of valid JWKs used for zklogin.
    """

    end_of_epoch: "EndOfEpochTransaction | None" = betterproto2.field(
        104, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Set of operations to run at the end of the epoch to close out the current epoch and start
    the next one.
    """

    randomness_state_update: "RandomnessStateUpdate | None" = betterproto2.field(
        105, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    Randomness update.
    """

    consensus_commit_prologue_v2: "ConsensusCommitPrologue | None" = betterproto2.field(
        106, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    V2 consensus commit update.
    """

    consensus_commit_prologue_v3: "ConsensusCommitPrologue | None" = betterproto2.field(
        107, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    V3 consensus commit update.
    """

    consensus_commit_prologue_v4: "ConsensusCommitPrologue | None" = betterproto2.field(
        108, betterproto2.TYPE_MESSAGE, optional=True, group="kind"
    )
    """
    V4 consensus commit update.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "TransactionKind", TransactionKind
)


@dataclass(eq=False, repr=False)
class TransferObjects(betterproto2.Message):
    """
    Command to transfer ownership of a set of objects to an address.
    """

    objects: "list[Argument]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Set of objects to transfer.
    """

    address: "Argument | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The address to transfer ownership to.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "TransferObjects", TransferObjects
)


@dataclass(eq=False, repr=False)
class TypeArgumentError(betterproto2.Message):
    """
    Type argument error.
    """

    type_argument: "int | None" = betterproto2.field(
        1, betterproto2.TYPE_UINT32, optional=True
    )
    """
    Index of the problematic type argument.
    """

    kind: "TypeArgumentErrorTypeArgumentErrorKind | None" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, optional=True
    )


default_message_pool.register_message(
    "sui.rpc.v2beta", "TypeArgumentError", TypeArgumentError
)


@dataclass(eq=False, repr=False)
class TypeOrigin(betterproto2.Message):
    """
    Identifies a struct and the module it was defined in.
    """

    module_name: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )

    struct_name: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )

    package_id: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )


default_message_pool.register_message("sui.rpc.v2beta", "TypeOrigin", TypeOrigin)


@dataclass(eq=False, repr=False)
class UnchangedSharedObject(betterproto2.Message):
    """
    A shared object that wasn't changed during execution.
    """

    kind: "UnchangedSharedObjectUnchangedSharedObjectKind | None" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, optional=True
    )

    object_id: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    ObjectId of the shared object.
    """

    version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Version of the shared object.
    """

    digest: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )
    """
    Digest of the shared object.
    """

    object_type: "str | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True
    )
    """
    Type information is not provided by the effects structure but is instead
    provided by an indexing layer
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "UnchangedSharedObject", UnchangedSharedObject
)


@dataclass(eq=False, repr=False)
class Upgrade(betterproto2.Message):
    """
    Command to upgrade an already published package.
    """

    modules: "list[bytes]" = betterproto2.field(
        1, betterproto2.TYPE_BYTES, repeated=True
    )
    """
    The serialized Move modules.
    """

    dependencies: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Set of packages that the to-be published package depends on.
    """

    package: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )
    """
    Package ID of the package to upgrade.
    """

    ticket: "Argument | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Ticket authorizing the upgrade.
    """


default_message_pool.register_message("sui.rpc.v2beta", "Upgrade", Upgrade)


@dataclass(eq=False, repr=False)
class UpgradeInfo(betterproto2.Message):
    """
    / Upgraded package info for the linkage table.
    """

    original_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    ID of the original package.
    """

    upgraded_id: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    ID of the upgraded package.
    """

    upgraded_version: "int | None" = betterproto2.field(
        3, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Version of the upgraded package.
    """


default_message_pool.register_message("sui.rpc.v2beta", "UpgradeInfo", UpgradeInfo)


@dataclass(eq=False, repr=False)
class UserSignature(betterproto2.Message):
    """
    A signature from a user.
    """

    bcs: "Bcs | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    This signature serialized as as BCS.

    When provided as input this will support both the form that is length
    prefixed as well as not length prefixed.
    """

    scheme: "SignatureScheme | None" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, optional=True
    )
    """
    The signature scheme of this signature.
    """

    signature: "bytes | None" = betterproto2.field(
        3, betterproto2.TYPE_BYTES, optional=True
    )
    """
    Signature bytes if scheme is ed25519 | secp256k1 | secp256r1.
    """

    public_key: "bytes | None" = betterproto2.field(
        4, betterproto2.TYPE_BYTES, optional=True
    )
    """
    Public key bytes if scheme is ed25519 | secp256k1 | secp256r1.
    """

    multisig: "MultisigAggregatedSignature | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The multisig aggregated signature if scheme is `MULTISIG`.
    """

    zklogin: "ZkLoginAuthenticator | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The zklogin authenticator if scheme is `ZKLOGIN`.
    """

    passkey: "PasskeyAuthenticator | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The passkey authenticator if scheme is `PASSKEY`.
    """


default_message_pool.register_message("sui.rpc.v2beta", "UserSignature", UserSignature)


@dataclass(eq=False, repr=False)
class ValidatorAggregatedSignature(betterproto2.Message):
    """
    / An aggregated signature from multiple validators.
    """

    epoch: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT64, optional=True)
    """
    The epoch when this signature was produced.

    This can be used to lookup the `ValidatorCommittee` from this epoch
    to verify this signature.
    """

    signature: "bytes | None" = betterproto2.field(
        2, betterproto2.TYPE_BYTES, optional=True
    )
    """
    The 48-byte Bls12381 aggregated signature.
    """

    bitmap: "list[int]" = betterproto2.field(3, betterproto2.TYPE_UINT32, repeated=True)
    """
    Bitmap indicating which members of the committee contributed to
    this signature.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ValidatorAggregatedSignature", ValidatorAggregatedSignature
)


@dataclass(eq=False, repr=False)
class ValidatorCommittee(betterproto2.Message):
    """
    The validator set for a particular epoch.
    """

    epoch: "int | None" = betterproto2.field(1, betterproto2.TYPE_UINT64, optional=True)
    """
    The epoch where this committee governs.
    """

    members: "list[ValidatorCommitteeMember]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The committee members.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ValidatorCommittee", ValidatorCommittee
)


@dataclass(eq=False, repr=False)
class ValidatorCommitteeMember(betterproto2.Message):
    """
    A member of a validator committee.
    """

    public_key: "bytes | None" = betterproto2.field(
        1, betterproto2.TYPE_BYTES, optional=True
    )
    """
    The 96-byte Bls12381 public key for this validator.
    """

    stake: "int | None" = betterproto2.field(2, betterproto2.TYPE_UINT64, optional=True)
    """
    Stake weight this validator possesses.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ValidatorCommitteeMember", ValidatorCommitteeMember
)


@dataclass(eq=False, repr=False)
class ValidatorExecutionTimeObservation(betterproto2.Message):
    validator: "bytes | None" = betterproto2.field(
        1, betterproto2.TYPE_BYTES, optional=True
    )
    """
    Bls12381 public key of the validator
    """

    duration: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    Duration of an execution observation
    """


default_message_pool.register_message(
    "sui.rpc.v2beta",
    "ValidatorExecutionTimeObservation",
    ValidatorExecutionTimeObservation,
)


@dataclass(eq=False, repr=False)
class VersionAssignment(betterproto2.Message):
    """
    Object version assignment from consensus.
    """

    object_id: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True
    )
    """
    `ObjectId` of the object.
    """

    version: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Assigned version.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "VersionAssignment", VersionAssignment
)


@dataclass(eq=False, repr=False)
class ZkLoginAuthenticator(betterproto2.Message):
    """
    A zklogin authenticator.
    """

    inputs: "ZkLoginInputs | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Zklogin proof and inputs required to perform proof verification.
    """

    max_epoch: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT64, optional=True
    )
    """
    Maximum epoch for which the proof is valid.
    """

    signature: "UserSignature | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    User signature with the public key attested to by the provided proof.
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ZkLoginAuthenticator", ZkLoginAuthenticator
)


@dataclass(eq=False, repr=False)
class ZkLoginClaim(betterproto2.Message):
    """
    A claim of the iss in a zklogin proof.
    """

    value: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)

    index_mod_4: "int | None" = betterproto2.field(
        2, betterproto2.TYPE_UINT32, optional=True
    )


default_message_pool.register_message("sui.rpc.v2beta", "ZkLoginClaim", ZkLoginClaim)


@dataclass(eq=False, repr=False)
class ZkLoginInputs(betterproto2.Message):
    """
    A zklogin groth16 proof and the required inputs to perform proof verification.
    """

    proof_points: "ZkLoginProof | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    iss_base64_details: "ZkLoginClaim | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    header_base64: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True
    )

    address_seed: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True
    )
    """
    base10 encoded Bn254FieldElement
    """


default_message_pool.register_message("sui.rpc.v2beta", "ZkLoginInputs", ZkLoginInputs)


@dataclass(eq=False, repr=False)
class ZkLoginProof(betterproto2.Message):
    """
    A zklogin groth16 proof.
    """

    a: "CircomG1 | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    b: "CircomG2 | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    c: "CircomG1 | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("sui.rpc.v2beta", "ZkLoginProof", ZkLoginProof)


@dataclass(eq=False, repr=False)
class ZkLoginPublicIdentifier(betterproto2.Message):
    """
    Public key equivalent for zklogin authenticators.
    """

    iss: "str | None" = betterproto2.field(1, betterproto2.TYPE_STRING, optional=True)

    address_seed: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True
    )
    """
    base10 encoded Bn254FieldElement
    """


default_message_pool.register_message(
    "sui.rpc.v2beta", "ZkLoginPublicIdentifier", ZkLoginPublicIdentifier
)


class LedgerServiceStub(betterproto2.ServiceStub):
    async def get_service_info(
        self,
        message: "GetServiceInfoRequest | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "GetServiceInfoResponse":
        """
        Query the service for general information about its current state.
        """

        if message is None:
            message = GetServiceInfoRequest()

        return await self._unary_unary(
            "/sui.rpc.v2beta.LedgerService/GetServiceInfo",
            message,
            GetServiceInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_object(
        self,
        message: "GetObjectRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Object":
        return await self._unary_unary(
            "/sui.rpc.v2beta.LedgerService/GetObject",
            message,
            Object,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_get_objects(
        self,
        message: "BatchGetObjectsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchGetObjectsResponse":
        return await self._unary_unary(
            "/sui.rpc.v2beta.LedgerService/BatchGetObjects",
            message,
            BatchGetObjectsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_transaction(
        self,
        message: "GetTransactionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ExecutedTransaction":
        return await self._unary_unary(
            "/sui.rpc.v2beta.LedgerService/GetTransaction",
            message,
            ExecutedTransaction,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def batch_get_transactions(
        self,
        message: "BatchGetTransactionsRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "BatchGetTransactionsResponse":
        return await self._unary_unary(
            "/sui.rpc.v2beta.LedgerService/BatchGetTransactions",
            message,
            BatchGetTransactionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_checkpoint(
        self,
        message: "GetCheckpointRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Checkpoint":
        return await self._unary_unary(
            "/sui.rpc.v2beta.LedgerService/GetCheckpoint",
            message,
            Checkpoint,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_epoch(
        self,
        message: "GetEpochRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Epoch":
        return await self._unary_unary(
            "/sui.rpc.v2beta.LedgerService/GetEpoch",
            message,
            Epoch,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TransactionExecutionServiceStub(betterproto2.ServiceStub):
    async def execute_transaction(
        self,
        message: "ExecuteTransactionRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ExecuteTransactionResponse":
        return await self._unary_unary(
            "/sui.rpc.v2beta.TransactionExecutionService/ExecuteTransaction",
            message,
            ExecuteTransactionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ....google import protobuf as ___google__protobuf__
